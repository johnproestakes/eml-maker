angular.module("EMLMaker").directive("aceEditor",["$timeout",function(e){return{restrict:"A",link:function(t,o,n){e(function(){var e=ace.edit(o.get(0).id);e.setTheme("ace/theme/eclipse"),e.getSession().setUseWrapMode(!0),e.getSession().setMode("ace/mode/xml");e.getSession().on("change",function(o){t.$apply(function(){t.workspace.sourceCode=e.getValue()})}),t.$on("$destroy",function(){e.destroy()})})}}}]);
angular.module("EMLMaker").directive("dropEnable",["$timeout",function(e){return{restrict:"A",scope:{ondropfile:"&",dataTransferEvt:"="},link:function(t,n,o){var r=n,a=null,i=function(e){clearTimeout(a),a=setTimeout(function(){r.removeClass("active"),setTimeout(function(){window.jQuery(".ui.sticky").sticky("refresh")},100),r.css({border:"",color:"",background:""})},100),e.stopPropagation(),e.preventDefault()},d=0;e(function(){r.get(0).addEventListener("drop",function(e){return"#/main"===location.hash&&(e.stopPropagation(),e.preventDefault(),d++,i(e),void((location.hash="#/main")&&t.ondropfile({evt:e})))},!1),r.get(0).addEventListener("dragend",i,!1),r.get(0).addEventListener("dragleave",i,!1),r.get(0).addEventListener("dragover",function(e){return clearTimeout(a),"#/main"===location.hash&&(e.dataTransfer.dropEffect="copy",r.addClass("active"),r.css({border:"solid 3px blue",color:"blue",background:"lightblue"}),a=setTimeout(function(){},100),void e.preventDefault())},!1)})}}}]);
angular.module("EMLMaker").directive("uiDropdown",["$timeout",function(o){return{restrict:"A",scope:{dropdownAction:"@"},link:function(n,t,d){o(function(){var o={action:"hide"};n.dropdownAction&&(o.action=n.dropdownAction),$(t).dropdown(o)}),n.$on("$destroy",function(){$(t).dropdown("destroy")})}}}]);
angular.module("EMLMaker").directive("gaEvent",["$timeout",function(n){return{restrict:"A",scope:{gaEvent:"@"},link:function(t,e,o){n(function(){var n=function(){for(var n=["send","event"],e=t.gaEvent.split(/\,|\|/),o=0;o<e.length;o++)n.push(e[o]);window.ga.apply(null,n)};e.on("click",n)}),t.$on("$destroy",function(){e.on("off",reportEvent)})}}}]);
angular.module("EMLMaker").directive("htmlViewer",["$timeout",function(t){return{restrict:"E",template:'<div><ol start="{{item.line}}"><li ng-repeat="ln in code(item) track by $index" ng-bind-html="ln"></li></ol></div>',scope:{item:"="},link:function(e,i,n){e.code=function(t){var e=t.displayFormattedURL().split(/\<br\>|\n/g);return e},t(function(){})}}}]);
angular.module("EMLMaker").directive("messageCenter",["$timeout",function(e){return{restrict:"E",template:'<div class="message-center"><div class="ui tiny secondary menu">    <div class="item mnu-title" style="padding-left:0;">{{heading === undefined ? "MESSAGES:" : heading }}</div>    <a class="item" ng-click="IntelligenceCenter.setType(\'\')" ng-class="{active: IntelligenceCenter.search.type==\'\'}" ng-show="IntelligenceCenter.canViewAll()">All <span class="ui tiny label">{{errors.messages.length}}</span></a>    <a class="item" ng-repeat="(tab,val) in errors.tabs track by $index" ng-show="errors.count[tab]" ng-click="IntelligenceCenter.setType(val)" ng-class="{active: IntelligenceCenter.search.type==val}">{{tab | uncamelize}} <span class="ui tiny label">{{errors.count[tab]}}</span></a>    </div>    <div id="error-messages-list" class="ui middle aligned divided list">      <message-item item="item" class="item" ng-repeat="obj in errors.messages | filter: IntelligenceCenter.search" error="obj"></message-item>      </div>      <div align="center" style="margin-top: -1.5em; padding-bottom: 1.5em;" ng-show="IntelligenceCenter.search.type!==\'\' && IntelligenceCenter.canViewAll()">      <button class="ui tiny basic button" ng-click="IntelligenceCenter.setType(\'\')"><i class="minus square icon"></i> Remove filter</button></div>    </div>',scope:{errors:"=",heading:"@",item:"="},link:function(n,t,i){e(function(){n.IntelligenceCenter=new EMLMakerIntelligence.IntelligenceCenter(n.errors,n),n.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("messageItem",["$timeout",function(e){return{restrict:"E",template:'<div ng-class="messageCls" class="intel-msg">    <div class="right floated content" ng-if="error.ctaLabel!==\'\'" >    <div class="ui small compact"     ng-class="buttonCls" ng-if="buttonCls"      ng-click="executeAction(item)"      ng-bind-html="error.ctaLabel">{{error.ctaLabel ? error.ctaLabel : "Resolve"}}</div>    </div>    <div class="right floated content" ng-if="error.cleanType==\'QA\'" >    <span class="ui icon label" ng-show="error.cleanType==\'QA\'&&error.override"><i class="thumbs up icon"></i> YOU CONFIRMED</span>    <div class="ui small compact"     ng-class="buttonCls" ng-if="buttonCls" ng-hide="error.override"      ng-click="error.setOverrideStatus(true);executeAction(item)"><i class="check icon"></i> Confirm</div>    </div>      <div class="content" ng-show="buttonCls">         <h4 ng-bind-html="error.title | dewidow"></h4>        <div ng-bind-html="error.description"></div></div>        <div ng-if="error.suggestion.length>0" ng-hide="error.override" class="suggestion">SUGGESTION: <div ng-bind-html="error.suggestion"></div></div>        <div ng-if="error.resource!==\'\'"><a ng-href="{{error.resource}}" target="_blank">{{error.resourceText}} <i class="external alternate icon"></i></a></div>    </div>',scope:{error:"=",item:"="},link:function(r,t,i){e(function(){var e=["","red","orange","violet","teal","blue"];r.executeAction=function(e){setTimeout(function(){r.$apply(function(){r.error.ctaHandler(e)})},100)},r.buttonCls=[e[r.error.severity],"button"].join(" "),"QA"==r.error.cleanType&&r.error.override?r.messageCls="":r.messageCls=["type-",r.error.type," level-",r.error.severity].join(""),r.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("messagesNotify",["$timeout",function(n){return{restrict:"E",template:'<div class="ui fluid labeled button" ng-click="ngClick()" ng-class="{\'animate-tada\': doAnimation}">      <div class="ui fluid button" ng-class="{\'yellow\':doAnimation, \'red\': !workspace.intelligence.canContinue}">        <i class="warning icon" alt="[!]" ng-show="!workspace.intelligence.canContinue"></i>        <i class="info icon" alt="(i)" ng-show="workspace.intelligence.canContinue"></i>        {{ count>1 ? "Messages" : "Message"}}        </div>      <div class="ui label" ng-class="{\'yellow\':doAnimation, \'red\': !workspace.intelligence.canContinue}">        {{count}}        </div>      </div>      </div>',scope:{workspace:"=",ngClick:"&",count:"="},link:function(i,o,t){i.doAnimation=!0,setTimeout(function(){i.$apply(function(){i.doAnimation=!1})},1500),i.$watch("count",function(n,i,o){n>i&&(o.doAnimation=!0,console.log("UPDATED"),setTimeout(function(){o.$apply(function(){o.doAnimation=!1})},1500))}),n(function(){setTimeout(function(){i.$apply(function(){i.doAnimation=!1})},2e3),i.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("ngChangeLazy",["$timeout",function(n){return{restrict:"A",scope:{ngModel:"=",ngChangeLazy:"&",changeLazyBuffer:"=",dataTransferEvt:"="},link:function(e,a,t){var o=null;n(function(){e.ngModel.toString();a.on("keyup",function(n){clearTimeout(o),o=setTimeout(function(){e.__lastValue!==a[0].value&&e.$apply(function(){e.ngChangeLazy(),e.__lastValue=e.ngModel.toString()})},void 0===t.changeLazyBuffer?500:1*t.changeLazyBuffer)}),e.$on("$destroy",function(){a.off("keyup")}),e.__lastValue=e.ngModel.toString()})}}}]);
angular.module("EMLMaker").directive("onReturnPress",["$timeout",function(e){return{restrict:"A",scope:{onReturnPress:"&",dataTransferEvt:"="},link:function(n,r,t){e(function(){r.on("keypress",function(e){13==e.keyCode&&n.onReturnPress()}),n.$on("$destroy",function(){r.off("keypress")})})}}}]);
angular.module("EMLMaker").directive("uiPopup",["$timeout",function(p){return{restrict:"A",scope:{popupId:"@",popupBehavior:"@"},link:function(o,u,i){p(function(){var p={hoverable:!0,popup:"#"+i.popupId};!function(o,i,e){void 0!==e.popupBehavior&&(p.on="click"),void 0!==e.popupId&&(p.popup="#"+e.popupId),o(u).popup(p),void 0!==e.popupShow&&o(u).popup("show"),i.$on("$destroy",function(){o(u).popup("destroy")})}(jQuery,o,i)})}}}]);
angular.module("EMLMaker").directive("queryStringEditor",["$timeout",function(e){return{restrict:"E",template:'<div class="query-string-editor well-component" ng-hide="item.isLinkType(\'mailto\')"><div style="overflow:hidden;padding-bottom:.5em;"><strong>QUERY STRING EDITOR</strong>    <div class="ui tiny basic buttons" style="float:right;">  <button class="ui icon button" ng-click="item.new.searchParams.deleteAll();item.isLinkComplete();scrollToItem(item.id);">Remove all</button>  <button class="ui icon button" ng-click="view == 1 ? view=0 : view=1">{{view==1? "Close" : "Edit"}}</button></div></div>     <div ng-if="item.new.searchParams._entries.length==1&&item.new.searchParams._entries[0].length==0">Query strings will appear here.</div>      <div ng-show="view==1">      <div style="margin-bottom:.5em;" class="ui action input" ng-if="str.length>0" ng-repeat="str in item.new.searchParams.entries track by $index">      <input type="text" ng-keyup="item.new.searchParams.updateSearchProp();item.isLinkComplete()" ng-model="item.new.searchParams._entries[$index]"/>      <button class="ui icon button" ng-click="item.new.searchParams.deleteAtIndex($index)">      Remove</button></div>      </div>      <div ng-show="view==0">      <ul class="tags-layout">       <li ng-if="str.length>0" ng-repeat="str in item.new.searchParams.entries track by $index">       {{str}} <a href="javascript:angular.noop()" ng-click="item.new.searchParams.deleteAtIndex($index);item.isLinkComplete()">       <i class="close icon" alt="[X]"></i></a></li><li><div class="ui transparent input"><input ng-keyup="createNewKeyup()" ng-blur="editState=false" ng-focus="editState=true" type="text" ng-model="newQueryString"></div></li></ul>       <div>{{editState ? "Press return or enter to add query string." : "Click to add query strings."}}</div>       </div>      </div>',scope:{item:"=",scrollTo:"&"},link:function(t,i,n){e(function(){var e=function(e){return e[e.DEFAULT=0]="DEFAULT",e[e.EDIT=1]="EDIT",e}({});t.editState=!1,window.qs_debug=t;var n=t;do n=n.$parent;while(void 0===n.scrollTo);t.scrollToItem=function(e){setTimeout(function(){t.$apply(function(){n.scrollTo(e-1)})},50)},t.view=e.DEFAULT,t.createNewKeyup=function(){/\?|\&/.test(t.newQueryString[0])&&(t.newQueryString=t.newQueryString.substr(1))},jQuery(i).find(".tags-layout input").on("keypress",function(e){t.$apply(function(){if(13==e.keyCode&&t.newQueryString.length>0){if(t.newQueryString.indexOf("&")>-1)for(var i=t.newQueryString.split("&"),n=0;n<i.length;n++)i[n].length>0&&t.item["new"].searchParams._entries.indexOf(i[n])==-1&&t.item["new"].searchParams.append(i[n]);else t.item["new"].searchParams._entries.indexOf(t.newQueryString.toString())==-1&&t.item["new"].searchParams.append(t.newQueryString.toString());t.item["new"].searchParams.updateSearchProp(),t.item.isLinkComplete(),t.newQueryString=""}})}),jQuery(i).on("click",function(){jQuery(i).find(".tags-layout input").focus()}),t.$on("$destroy",function(){jQuery(i).find(".tags-layout input").off("keypress"),jQuery(i).find(".tags-layout input").off("keyup"),jQuery(i).off("click")})})}}}]);
angular.module("EMLMaker").directive("scrollspy",["$timeout",function(i){return{restrict:"A",link:function(n,e,o){i(function(){void 0===n.activeLinkId&&(n.activeLinkId=1),void 0===n.isScrolling&&(n.isScrolling=!1);var i=function(){if(n.isScrolling&&1==n.isScrolling)return!1;var i=jQuery(e).attr("id").split("-").pop();n.$apply(function(){n.activeLinkId=1*i})};jQuery(e).visibility({once:!1,observeChanges:!0,onTopVisible:i,onTopPassedReverse:i}),n.$on("$destroy",function(){jQuery(e).visibility("destroy")})})}}}]);
angular.module("EMLMaker").directive("simpleAccordion",["$timeout",function(n){return{restrict:"E",transclude:!0,scope:{heading:"@",show:"="},template:'<div ng-class="{expanded: show, collapsed: !show}"><div ng-click="togglePane()" class="accordion-title">    <i class="chevron right icon" ng-show="!show" alt="[+]"></i>    <i class="chevron down icon" ng-show="show" alt="[-]"></i>     <span>{{heading}}</span></div><ng-transclude ng-show="show"></ng-transclude></div>',link:function(o,e,i){o.show=!1,n(function(){o.togglePane=function(){o.show=!o.show},jQuery.extend(jQuery(e),{toggleAccordion:function(){o.$apply(function(){o.togglePane()})}}),o.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("sticky",["$timeout",function(e){return{restrict:"A",link:function(i,n,t){e(function(){jQuery(n).sticky({context:"#stickyparent"});var e=null,t=function(){e=setTimeout(function(){var e=$("#right-panel"),i=e.find(".ui.secondary.vertical.pointing.menu"),t=e.find(".message-area");e[0].style.height="",e[0].clientHeight>window.innerHeight-135?(e[0].style.height=window.innerHeight-150+"px",i[0].style.height=e[0].clientHeight-t[0].clientHeight+"px",i.addClass("scrolling")):i.removeClass("scrolling"),jQuery(n).sticky("refresh")},300)};$(window).on("resize",t),$(window).on("scroll",t),t(),i.$on("$destroy",function(){$(window).off("resize",t),$(window).off("scroll",t),jQuery(n).sticky("destroy")})})}}}]);
angular.module("EMLMaker").directive("textareaExpand",["$timeout",function(t){return{restrict:"A",link:function(e,n,r){var o=function(t){t.style.height="inherit";var e=window.getComputedStyle(t),n=parseInt(e.getPropertyValue("border-top-width"),10)+parseInt(e.getPropertyValue("padding-top"),10)+t.scrollHeight+parseInt(e.getPropertyValue("padding-bottom"),10)+parseInt(e.getPropertyValue("border-bottom-width"),10);t.style.height=n+"px"};t(function(){$(n).css("min-height","25px"),o($(n).get(0)),$(n).on("input change",function(t){o($(n).get(0))})}),e.$on("$destroy",function(){})}}}]);
//# sourceMappingURL=data:application/json;base64,
