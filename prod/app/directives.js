angular.module("EMLMaker").directive("aceEditor",["$timeout",function(e){return{restrict:"A",link:function(t,o,n){e(function(){var e=ace.edit(o.get(0).id);e.setTheme("ace/theme/eclipse"),e.getSession().setUseWrapMode(!0),e.getSession().setMode("ace/mode/xml");e.getSession().on("change",function(o){t.$apply(function(){t.workspace.sourceCode=e.getValue()})}),t.$on("$destroy",function(){e.destroy()})})}}}]);
angular.module("EMLMaker").directive("dropEnable",["$timeout",function(e){return{restrict:"A",scope:{ondropfile:"&",dataTransferEvt:"="},link:function(t,n,o){var r=n,a=null,i=function(e){clearTimeout(a),a=setTimeout(function(){r.removeClass("active"),setTimeout(function(){window.jQuery(".ui.sticky").sticky("refresh")},100),r.css({border:"",color:"",background:""})},100),e.stopPropagation(),e.preventDefault()},d=0;e(function(){r.get(0).addEventListener("drop",function(e){return"#/main"===location.hash&&(e.stopPropagation(),e.preventDefault(),d++,i(e),void((location.hash="#/main")&&t.ondropfile({evt:e})))},!1),r.get(0).addEventListener("dragend",i,!1),r.get(0).addEventListener("dragleave",i,!1),r.get(0).addEventListener("dragover",function(e){return clearTimeout(a),"#/main"===location.hash&&(e.dataTransfer.dropEffect="copy",r.addClass("active"),r.css({border:"solid 3px blue",color:"blue",background:"lightblue"}),a=setTimeout(function(){},100),void e.preventDefault())},!1)})}}}]);
angular.module("EMLMaker").directive("uiDropdown",["$timeout",function(o){return{restrict:"A",scope:{dropdownAction:"@"},link:function(n,t,d){o(function(){var o={action:"hide"};n.dropdownAction&&(o.action=n.dropdownAction),$(t).dropdown(o)}),n.$on("$destroy",function(){$(t).dropdown("destroy")})}}}]);
angular.module("EMLMaker").directive("gaEvent",["$timeout",function(n){return{restrict:"A",scope:{gaEvent:"@"},link:function(t,e,o){n(function(){var n=function(){for(var n=["send","event"],e=t.gaEvent.split(/\,|\|/),o=0;o<e.length;o++)n.push(e[o]);window.ga.apply(null,n)};e.on("click",n)}),t.$on("$destroy",function(){e.on("off",reportEvent)})}}}]);
angular.module("EMLMaker").directive("htmlViewer",["$timeout",function(t){return{restrict:"E",template:'<div><ol start="{{item.line}}"><li ng-repeat="ln in code(item) track by $index" ng-bind-html="ln"></li></ol></div>',scope:{item:"="},link:function(e,i,n){e.code=function(t){var e=t.displayFormattedURL().split(/\<br\>|\n/g);return e},t(function(){})}}}]);
angular.module("EMLMaker").directive("messageCenter",["$timeout",function(e){return{restrict:"E",template:'<div class="message-center"><div class="ui tiny secondary menu">    <div class="item mnu-title" style="padding-left:0;">{{heading === undefined ? "MESSAGES:" : heading }}</div>    <a class="item" ng-click="IntelligenceCenter.setType(\'\')" ng-class="{active: IntelligenceCenter.search.type==\'\'}" ng-show="IntelligenceCenter.canViewAll()">All <span class="ui tiny label">{{errors.messages.length}}</span></a>    <a class="item" ng-repeat="(tab,val) in errors.tabs track by $index" ng-show="errors.count[tab]" ng-click="IntelligenceCenter.setType(val)" ng-class="{active: IntelligenceCenter.search.type==val}">{{tab | uncamelize}} <span class="ui tiny label">{{errors.count[tab]}}</span></a>    </div>    <div id="error-messages-list" class="ui middle aligned divided list">      <message-item item="item" class="item" ng-repeat="obj in errors.messages | filter: IntelligenceCenter.search" error="obj"></message-item>      </div>      <div align="center" style="margin-top: -1.5em; padding-bottom: 1.5em;" ng-show="IntelligenceCenter.search.type!==\'\' && IntelligenceCenter.canViewAll()">      <button class="ui tiny basic button" ng-click="IntelligenceCenter.setType(\'\')"><i class="minus square icon"></i> Remove filter</button></div>    </div>',scope:{errors:"=",heading:"@",item:"="},link:function(n,t,i){e(function(){n.IntelligenceCenter=new EMLMakerIntelligence.IntelligenceCenter(n.errors,n),n.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("messageItem",["$timeout",function(e){return{restrict:"E",template:'<div ng-class="messageCls" class="intel-msg">    <div class="right floated content" ng-if="error.ctaLabel!==\'\'" >    <div class="ui small compact"     ng-class="buttonCls" ng-if="buttonCls"      ng-click="executeAction(item)"      ng-bind-html="error.ctaLabel">{{error.ctaLabel ? error.ctaLabel : "Resolve"}}</div>    </div>    <div class="right floated content" ng-if="error.cleanType==\'QA\'" >    <span class="ui icon label" ng-show="error.cleanType==\'QA\'&&error.override"><i class="thumbs up icon"></i> YOU CONFIRMED</span>    <div class="ui small compact"     ng-class="buttonCls" ng-if="buttonCls" ng-hide="error.override"      ng-click="error.setOverrideStatus(true);executeAction(item)"><i class="check icon"></i> Confirm</div>    </div>      <div class="content" ng-show="buttonCls">         <h4 ng-bind-html="error.title | dewidow"></h4>        <div ng-bind-html="error.description"></div></div>        <div ng-if="error.suggestion.length>0" ng-hide="error.override" class="suggestion">SUGGESTION: <div ng-bind-html="error.suggestion"></div></div>        <div ng-if="error.resource!==\'\'"><a ng-href="{{error.resource}}" target="_blank">{{error.resourceText}} <i class="external alternate icon"></i></a></div>    </div>',scope:{error:"=",item:"="},link:function(r,t,i){e(function(){var e=["","red","orange","violet","teal","blue"];r.executeAction=function(e){setTimeout(function(){r.$apply(function(){r.error.ctaHandler(e)})},100)},r.buttonCls=[e[r.error.severity],"button"].join(" "),"QA"==r.error.cleanType&&r.error.override?r.messageCls="":r.messageCls=["type-",r.error.type," level-",r.error.severity].join(""),r.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("messagesNotify",["$timeout",function(n){return{restrict:"E",template:'<div class="ui fluid labeled button" ng-click="ngClick()" ng-class="{\'animate-tada\': doAnimation}">      <div class="ui fluid button" ng-class="{\'yellow\':doAnimation, \'red\': !workspace.intelligence.canContinue}">        <i class="warning icon" alt="[!]" ng-show="!workspace.intelligence.canContinue"></i>        <i class="info icon" alt="(i)" ng-show="workspace.intelligence.canContinue"></i>        {{ count>1 ? "Messages" : "Message"}}        </div>      <div class="ui label" ng-class="{\'yellow\':doAnimation, \'red\': !workspace.intelligence.canContinue}">        {{count}}        </div>      </div>      </div>',scope:{workspace:"=",ngClick:"&",count:"="},link:function(i,o,t){i.doAnimation=!0,setTimeout(function(){i.$apply(function(){i.doAnimation=!1})},1500),i.$watch("count",function(n,i,o){n>i&&(o.doAnimation=!0,console.log("UPDATED"),setTimeout(function(){o.$apply(function(){o.doAnimation=!1})},1500))}),n(function(){setTimeout(function(){i.$apply(function(){i.doAnimation=!1})},2e3),i.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("ngChangeLazy",["$timeout",function(n){return{restrict:"A",scope:{ngModel:"=",ngChangeLazy:"&",changeLazyBuffer:"=",dataTransferEvt:"="},link:function(e,a,t){var o=null;n(function(){e.ngModel.toString();a.on("keyup",function(n){clearTimeout(o),o=setTimeout(function(){e.__lastValue!==a[0].value&&e.$apply(function(){e.ngChangeLazy(),e.__lastValue=e.ngModel.toString()})},void 0===t.changeLazyBuffer?500:1*t.changeLazyBuffer)}),e.$on("$destroy",function(){a.off("keyup")}),e.__lastValue=e.ngModel.toString()})}}}]);
angular.module("EMLMaker").directive("onReturnPress",["$timeout",function(e){return{restrict:"A",scope:{onReturnPress:"&",dataTransferEvt:"="},link:function(n,r,t){e(function(){r.on("keypress",function(e){13==e.keyCode&&n.onReturnPress()}),n.$on("$destroy",function(){r.off("keypress")})})}}}]);
angular.module("EMLMaker").directive("uiPopup",["$timeout",function(p){return{restrict:"A",scope:{popupId:"@",popupBehavior:"@"},link:function(o,u,i){p(function(){var p={hoverable:!0,popup:"#"+i.popupId};!function(o,i,e){void 0!==e.popupBehavior&&(p.on="click"),void 0!==e.popupId&&(p.popup="#"+e.popupId),o(u).popup(p),void 0!==e.popupShow&&o(u).popup("show"),i.$on("$destroy",function(){o(u).popup("destroy")})}(jQuery,o,i)})}}}]);
angular.module("EMLMaker").directive("queryStringEditor",["$timeout",function(e){return{restrict:"E",template:'<div class="query-string-editor well-component" ng-hide="item.isLinkType(\'mailto\')"><div style="overflow:hidden;padding-bottom:.5em;"><strong>QUERY STRING EDITOR</strong>    <div class="ui tiny basic buttons" style="float:right;">  <button class="ui icon button" ng-click="item.new.searchParams.deleteAll();item.isLinkComplete();scrollToItem(item.id);">Remove all</button>  <button class="ui icon button" ng-click="view == 1 ? view=0 : view=1">{{view==1? "Close" : "Edit"}}</button></div></div>     <div ng-if="item.new.searchParams._entries.length==1&&item.new.searchParams._entries[0].length==0">Query strings will appear here.</div>      <div ng-show="view==1">      <div style="margin-bottom:.5em;" class="ui action input" ng-if="str.length>0" ng-repeat="str in item.new.searchParams.entries track by $index">      <input type="text" ng-keyup="item.new.searchParams.updateSearchProp();item.isLinkComplete()" ng-model="item.new.searchParams._entries[$index]"/>      <button class="ui icon button" ng-click="item.new.searchParams.deleteAtIndex($index)">      Remove</button></div>      </div>      <div ng-show="view==0">      <ul class="tags-layout">       <li ng-if="str.length>0" ng-repeat="str in item.new.searchParams.entries track by $index">       {{str}} <a href="javascript:angular.noop()" ng-click="item.new.searchParams.deleteAtIndex($index);item.isLinkComplete()">       <i class="close icon" alt="[X]"></i></a></li></ul>       </div>      </div>',scope:{item:"=",scrollTo:"&"},link:function(t,i,n){e(function(){var e=function(e){return e[e.DEFAULT=0]="DEFAULT",e[e.EDIT=1]="EDIT",e}({});window.qs_debug=t;var i=t;do i=i.$parent;while(void 0===i.scrollTo);t.scrollToItem=function(e){setTimeout(function(){t.$apply(function(){i.scrollTo(e-1)})},50)},t.view=e.DEFAULT,t.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("scrollspy",["$timeout",function(i){return{restrict:"A",link:function(n,e,o){i(function(){void 0===n.activeLinkId&&(n.activeLinkId=1),void 0===n.isScrolling&&(n.isScrolling=!1);var i=function(){if(n.isScrolling&&1==n.isScrolling)return!1;var i=jQuery(e).attr("id").split("-").pop();n.$apply(function(){n.activeLinkId=1*i})};jQuery(e).visibility({once:!1,observeChanges:!0,onTopVisible:i,onTopPassedReverse:i}),n.$on("$destroy",function(){jQuery(e).visibility("destroy")})})}}}]);
angular.module("EMLMaker").directive("simpleAccordion",["$timeout",function(n){return{restrict:"E",transclude:!0,scope:{heading:"@",show:"="},template:'<div ng-class="{expanded: show, collapsed: !show}"><div ng-click="togglePane()" class="accordion-title">    <i class="chevron right icon" ng-show="!show" alt="[+]"></i>    <i class="chevron down icon" ng-show="show" alt="[-]"></i>     <span>{{heading}}</span></div><ng-transclude ng-show="show"></ng-transclude></div>',link:function(o,e,i){o.show=!1,n(function(){o.togglePane=function(){o.show=!o.show},jQuery.extend(jQuery(e),{toggleAccordion:function(){o.$apply(function(){o.togglePane()})}}),o.$on("$destroy",function(){})})}}}]);
angular.module("EMLMaker").directive("sticky",["$timeout",function(e){return{restrict:"A",link:function(i,n,t){e(function(){jQuery(n).sticky({context:"#stickyparent"});var e=null,t=function(){e=setTimeout(function(){var e=$("#right-panel"),i=e.find(".ui.secondary.vertical.pointing.menu"),t=e.find(".message-area");e[0].style.height="",e[0].clientHeight>window.innerHeight-135?(e[0].style.height=window.innerHeight-150+"px",i[0].style.height=e[0].clientHeight-t[0].clientHeight+"px",i.addClass("scrolling")):i.removeClass("scrolling"),jQuery(n).sticky("refresh")},300)};$(window).on("resize",t),$(window).on("scroll",t),t(),i.$on("$destroy",function(){$(window).off("resize",t),$(window).off("scroll",t),jQuery(n).sticky("destroy")})})}}}]);
angular.module("EMLMaker").directive("textareaExpand",["$timeout",function(t){return{restrict:"A",link:function(e,n,r){var o=function(t){t.style.height="inherit";var e=window.getComputedStyle(t),n=parseInt(e.getPropertyValue("border-top-width"),10)+parseInt(e.getPropertyValue("padding-top"),10)+t.scrollHeight+parseInt(e.getPropertyValue("padding-bottom"),10)+parseInt(e.getPropertyValue("border-bottom-width"),10);t.style.height=n+"px"};t(function(){$(n).css("min-height","25px"),o($(n).get(0)),$(n).on("input change",function(t){o($(n).get(0))})}),e.$on("$destroy",function(){})}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjZUVkaXRvci5qcyIsImRyb3AtZW5hYmxlLmpzIiwiZHJvcGRvd24uanMiLCJnYUV2ZW50LmpzIiwiaHRtbFZpZXdlci5qcyIsIm1lc3NhZ2VDZW50ZXIuanMiLCJtZXNzYWdlSXRlbS5qcyIsIm1lc3NhZ2VzTm90aWZ5LmpzIiwibmdDaGFuZ2VMYXp5LmpzIiwib25SZXR1cm5QcmVzcy5qcyIsInBvcHVwLmpzIiwicXVlcnlTdHJpbmdFZGl0b3IuanMiLCJzY3JvbGxzcHkuanMiLCJzaW1wbGVBY2NvcmRpb24uanMiLCJzdGlja3kuanMiLCJ0ZXh0YXJlYUV4cGFuZC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwiJHRpbWVvdXQiLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsIiwiYXR0ciIsImVkaXRvciIsImFjZSIsImVkaXQiLCJnZXQiLCJpZCIsInNldFRoZW1lIiwiZ2V0U2Vzc2lvbiIsInNldFVzZVdyYXBNb2RlIiwic2V0TW9kZSIsIm9uIiwiZSIsIiRhcHBseSIsIndvcmtzcGFjZSIsInNvdXJjZUNvZGUiLCJnZXRWYWx1ZSIsIiRvbiIsImRlc3Ryb3kiLCJvbmRyb3BmaWxlIiwiZGF0YVRyYW5zZmVyRXZ0IiwiZmlsZURyb3BwZXIiLCJ0aW1lciIsImRyb3BwZXJSZXNldCIsImV2dCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZW1vdmVDbGFzcyIsIndpbmRvdyIsImpRdWVyeSIsInN0aWNreSIsImNzcyIsImJvcmRlciIsImNvbG9yIiwiYmFja2dyb3VuZCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiY291bnRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2NhdGlvbiIsImhhc2giLCJkYXRhVHJhbnNmZXIiLCJkcm9wRWZmZWN0IiwiYWRkQ2xhc3MiLCJkcm9wZG93bkFjdGlvbiIsImFjdGlvbiIsIiQiLCJkcm9wZG93biIsImdhRXZlbnQiLCJyZXBvcnRFdmVudCIsImFyZ3MiLCJuZXdBcmdzIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwicHVzaCIsImdhIiwiYXBwbHkiLCJ0ZW1wbGF0ZSIsIml0ZW0iLCJjb2RlIiwiYyIsImIiLCJkaXNwbGF5Rm9ybWF0dGVkVVJMIiwiZXJyb3JzIiwiaGVhZGluZyIsIkludGVsbGlnZW5jZUNlbnRlciIsIkVNTE1ha2VySW50ZWxsaWdlbmNlIiwiZXJyb3IiLCJjbHMiLCJleGVjdXRlQWN0aW9uIiwiY3RhSGFuZGxlciIsImJ1dHRvbkNscyIsInNldmVyaXR5Iiwiam9pbiIsImNsZWFuVHlwZSIsIm92ZXJyaWRlIiwibWVzc2FnZUNscyIsInR5cGUiLCJuZ0NsaWNrIiwiY291bnQiLCJkb0FuaW1hdGlvbiIsIiR3YXRjaCIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJjb25zb2xlIiwibG9nIiwibmdNb2RlbCIsIm5nQ2hhbmdlTGF6eSIsImNoYW5nZUxhenlCdWZmZXIiLCJ0b1N0cmluZyIsIl9fbGFzdFZhbHVlIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJvZmYiLCJvblJldHVyblByZXNzIiwia2V5Q29kZSIsInBvcHVwSWQiLCJwb3B1cEJlaGF2aW9yIiwiaG92ZXJhYmxlIiwicG9wdXAiLCJwb3B1cFNob3ciLCJzY3JvbGxUbyIsIlZpZXciLCJxc19kZWJ1ZyIsInBvaW50ZXIiLCIkcGFyZW50Iiwic2Nyb2xsVG9JdGVtIiwicGFyYW0iLCJ2aWV3IiwiREVGQVVMVCIsImFjdGl2ZUxpbmtJZCIsImlzU2Nyb2xsaW5nIiwiZnVuYyIsInBvcCIsInZpc2liaWxpdHkiLCJvbmNlIiwib2JzZXJ2ZUNoYW5nZXMiLCJvblRvcFZpc2libGUiLCJvblRvcFBhc3NlZFJldmVyc2UiLCJ0cmFuc2NsdWRlIiwic2hvdyIsInRvZ2dsZVBhbmUiLCJleHRlbmQiLCJ0b2dnbGVBY2NvcmRpb24iLCJjb250ZXh0IiwicmVzaXplVGltZXIiLCJSZXNpemVTdGlja3kiLCJhIiwiZmluZCIsInN0eWxlIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJhdXRvRXhwYW5kIiwiZmllbGQiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJwYXJzZUludCIsImdldFByb3BlcnR5VmFsdWUiLCJzY3JvbGxIZWlnaHQiLCJldmVudCJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVFDLE9BQU8sWUFBWUMsVUFBVSxhQUFjLFdBQVksU0FBU0MsR0FFdEUsT0FDRUMsU0FBVSxJQUNWQyxLQUFNLFNBQVNDLEVBQU9DLEVBQUlDLEdBQ3hCTCxFQUFTLFdBR0wsR0FBSU0sR0FBU0MsSUFBSUMsS0FBS0osRUFBR0ssSUFBSSxHQUFHQyxHQUVoQ0osR0FBT0ssU0FBUyxxQkFHaEJMLEVBQU9NLGFBQWFDLGdCQUFlLEdBQ25DUCxFQUFPTSxhQUFhRSxRQUFRLGVBRTVCUixHQUFPTSxhQUFhRyxHQUFHLFNBQVUsU0FBU0MsR0FDeENiLEVBQU1jLE9BQU8sV0FDWGQsRUFBTWUsVUFBVUMsV0FBYWIsRUFBT2MsZUFLMUNqQixFQUFNa0IsSUFBSSxXQUFZLFdBQ3BCZixFQUFPZ0I7QUN4QmpCekIsUUFBUUMsT0FBTyxZQUNkQyxVQUFVLGNBQWUsV0FBWSxTQUFTQyxHQUM5QyxPQUNDQyxTQUFVLElBRVZFLE9BQ0NvQixXQUFXLElBQ1hDLGdCQUFnQixLQUVqQnRCLEtBQU0sU0FBU0MsRUFBT0MsRUFBSUMsR0FDekIsR0FBSW9CLEdBQWNyQixFQUNkc0IsRUFBUSxLQUVSQyxFQUFlLFNBQVNDLEdBQzNCQyxhQUFhSCxHQUNiQSxFQUFRSSxXQUFXLFdBQ25CTCxFQUFZTSxZQUFZLFVBQ3hCRCxXQUFXLFdBQVdFLE9BQU9DLE9BQU8sY0FBY0MsT0FBTyxZQUFhLEtBQ3RFVCxFQUFZVSxLQUFLQyxPQUFRLEdBQUdDLE1BQU0sR0FBSUMsV0FBWSxNQUcvQyxLQUNIVixFQUFJVyxrQkFDRFgsRUFBSVksa0JBSUhDLEVBQVUsQ0FDZnpDLEdBQVMsV0FFVHlCLEVBQVloQixJQUFJLEdBQUdpQyxpQkFBaUIsT0FBUSxTQUFTZCxHQUNwRCxNQUFxQixXQUFsQmUs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NUR0RSxFQUFFbkIsU0FBUyxjQUlYbUIsRUFBRW5DLFlBQVksYUFFaEJFLE9BQU83QixHQUFJOEIsT0FBTyxZQUVsQixLQUtGZ0IsR0FBRWxCLFFBQVFqQixHQUFHLFNBQVVvSCxHQUN2QmpGLEVBQUVsQixRQUFRakIsR0FBRyxTQUFVb0gsR0FFdkJBLElBRUloSSxFQUFNa0IsSUFBSSxXQUFZLFdBRXBCNkIsRUFBRWxCLFFBQVFrRSxJQUFJLFNBQVVpQyxHQUN4QmpGLEVBQUVsQixRQUFRa0UsSUFBSSxTQUFVaUMsR0FDeEJsRyxPQUFPN0IsR0FBSThCLE9BQU87QUM5QzVCckMsUUFBUUMsT0FBTyxZQUFZQyxVQUFVLGtCQUFtQixXQUFZLFNBQVNDLEdBRTNFLE9BQ0VDLFNBQVUsSUFDVkMsS0FBTSxTQUFTQyxFQUFPQyxFQUFJQyxHQUN4QixHQUFJcUksR0FBYSxTQUFVQyxHQUcxQkEsRUFBTUwsTUFBTUMsT0FBUyxTQUdyQixJQUFJSyxHQUFXNUcsT0FBTzZHLGlCQUFpQkYsR0FHbkNKLEVBQVNPLFNBQVNGLEVBQVNHLGlCQUFpQixvQkFBcUIsSUFDdERELFNBQVNGLEVBQVNHLGlCQUFpQixlQUFnQixJQUNuREosRUFBTUssYUFDTkYsU0FBU0YsRUFBU0csaUJBQWlCLGtCQUFtQixJQUN0REQsU0FBU0YsRUFBU0csaUJBQWlCLHVCQUF3QixHQUUxRUosR0FBTUwsTUFBTUMsT0FBU0EsRUFBUyxLQUkvQnZJLEdBQVMsV0FDUGtELEVBQUU5QyxHQUFJK0IsSUFBSSxhQUFjLFFBQ3hCdUcsRUFBV3hGLEVBQUU5QyxHQUFJSyxJQUFJLElBQ3JCeUMsRUFBRTlDLEdBQUlXLEdBQUcsZUFBZ0IsU0FBVWtJLEdBQ2xDUCxFQUFXeEYsRUFBRTlDLEdBQUlLLElBQUksUUFNeEJOLEVBQU1rQixJQUFJLFdBQVciLCJmaWxlIjoiZGlyZWN0aXZlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdFTUxNYWtlcicpLmRpcmVjdGl2ZSgnYWNlRWRpdG9yJywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KXtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHIpe1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcblxuXG4gICAgICAgICAgdmFyIGVkaXRvciA9IGFjZS5lZGl0KGVsLmdldCgwKS5pZCk7XG5cbiAgICAgICAgICBlZGl0b3Iuc2V0VGhlbWUoXCJhY2UvdGhlbWUvZWNsaXBzZVwiKTtcbiAgICAgICAgICAvL2Rhd25cbiAgICAgICAgICAvL2VjbGlwc2VcbiAgICAgICAgICBlZGl0b3IuZ2V0U2Vzc2lvbigpLnNldFVzZVdyYXBNb2RlKHRydWUpO1xuICAgICAgICAgIGVkaXRvci5nZXRTZXNzaW9uKCkuc2V0TW9kZShcImFjZS9tb2RlL3htbFwiKTtcbiAgICAgICAgICB2YXIgdGltZXIgPSBudWxsO1xuICAgICAgICAgIGVkaXRvci5nZXRTZXNzaW9uKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHNjb3BlLndvcmtzcGFjZS5zb3VyY2VDb2RlID0gZWRpdG9yLmdldFZhbHVlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpe1xuICAgICAgICAgIGVkaXRvci5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuXG5cblxuICAgIH0pO1xuICB9XG59XG5cblxufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ0VNTE1ha2VyJylcbi5kaXJlY3RpdmUoJ2Ryb3BFbmFibGUnLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpe1xuXHRyZXR1cm4ge1xuXHRcdHJlc3RyaWN0OiBcIkFcIixcblx0XHQvLyB0cmFuc2NsdWRlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRvbmRyb3BmaWxlOlwiJlwiLFxuXHRcdFx0ZGF0YVRyYW5zZmVyRXZ0OlwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHIpe1xuXHRcdFx0dmFyIGZpbGVEcm9wcGVyID0gZWw7XG5cdFx0XHR2YXIgdGltZXIgPSBudWxsO1xuXHRcdFx0Ly9yZXNldFxuXHRcdFx0dmFyIGRyb3BwZXJSZXNldCA9IGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lcik7XG5cdFx0XHRcdHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRmaWxlRHJvcHBlci5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXt3aW5kb3cualF1ZXJ5KCcudWkuc3RpY2t5Jykuc3RpY2t5KFwicmVmcmVzaFwiKTt9LDEwMCk7XG5cdFx0XHRcdGZpbGVEcm9wcGVyLmNzcyh7Ym9yZGVyOiBcIlwiLGNvbG9yOlwiXCIsIGJhY2tncm91bmQ6IFwiXCJ9KTtcblxuXHRcdFx0XHRcdC8vIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9LCAxMDApO1xuXHRcdFx0XHRldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgXHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR2YXIgY291bnRlciA9IDA7XG5cdFx0XHQkdGltZW91dChmdW5jdGlvbigpe1xuXG5cdFx0XHRmaWxlRHJvcHBlci5nZXQoMCkuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHRcdGlmKGxvY2F0aW9uLmhhc2ggIT09IFwiIy9tYWluXCIpIHJldHVybiBmYWxzZTtcblx0XHRcdFx0ZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGNvdW50ZXIrKztcblx0XHRcdFx0XHRkcm9wcGVyUmVzZXQoZXZ0KTtcblx0XHRcdFx0XHRpZihsb2NhdGlvbi5oYXNoID0gXCIjL21haW5cIil7XG5cdFx0XHRcdFx0XHRzY29wZS5vbmRyb3BmaWxlKHtcImV2dFwiOmV2dH0pO1xuXHRcdFx0XHRcdH1cblxuXG5cblx0XHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0ZmlsZURyb3BwZXIuZ2V0KDApLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCBkcm9wcGVyUmVzZXQsIGZhbHNlKTtcblx0XHRcdGZpbGVEcm9wcGVyLmdldCgwKS5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBkcm9wcGVyUmVzZXQsIGZhbHNlKTtcblx0XHRcdGZpbGVEcm9wcGVyLmdldCgwKS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGZ1bmN0aW9uKGV2dCl7XG5cblx0XHRcdFx0Ly8gZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lcik7XG5cdFx0XHRcdGlmKGxvY2F0aW9uLmhhc2ggIT09IFwiIy9tYWluXCIpIHJldHVybiBmYWxzZTtcblx0XHRcdFx0ZXZ0LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ2NvcHknO1xuXHRcdFx0XHRmaWxlRHJvcHBlci5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblx0XHRcdFx0ZmlsZURyb3BwZXIuY3NzKHtib3JkZXI6IFwic29saWQgM3B4IGJsdWVcIiwgY29sb3I6XCJibHVlXCIsIGJhY2tncm91bmQ6IFwibGlnaHRibHVlXCJ9KTtcblx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0XHQvLyBldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fSwgMTAwKTtcblxuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fSwgZmFsc2UpO1xuXG5cblx0XHRcdFx0fSk7XG5cblx0XHRcdH1cblx0XHR9O1xuXHR9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnRU1MTWFrZXInKS5kaXJlY3RpdmUoJ3VpRHJvcGRvd24nLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpe1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgIHNjb3BlOiB7ZHJvcGRvd25BY3Rpb246IFwiQFwifSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHIpe1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGF0dHIgPSB7IGFjdGlvbjogXCJoaWRlXCJ9O1xuICAgICAgICBpZihzY29wZS5kcm9wZG93bkFjdGlvbikgYXR0ci5hY3Rpb24gPSBzY29wZS5kcm9wZG93bkFjdGlvbjtcbiAgICAgICAgJChlbCkuZHJvcGRvd24oYXR0cik7XG4gICAgICB9KTtcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLGZ1bmN0aW9uKCl7XG4gICAgICAgICQoZWwpLmRyb3Bkb3duKFwiZGVzdHJveVwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuXG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnRU1MTWFrZXInKVxuLmRpcmVjdGl2ZSgnZ2FFdmVudCcsIFsnJHRpbWVvdXQnLCBmdW5jdGlvbigkdGltZW91dCl7XG5cdHJldHVybiB7XG5cdFx0cmVzdHJpY3Q6IFwiQVwiLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRnYUV2ZW50OlwiQFwiXG5cdFx0fSxcblx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHIpe1xuXG5cdFx0XHQkdGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgcmVwb3J0RXZlbnQgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHZhciBhcmdzID0gW1wic2VuZFwiLFwiZXZlbnRcIl0sIG5ld0FyZ3MgPSBzY29wZS5nYUV2ZW50LnNwbGl0KC9cXCx8XFx8Lyk7XG5cdFx0XHRcdFx0Zm9yKHZhciBpID0wOyBpPG5ld0FyZ3MubGVuZ3RoO2krKyl7XG5cdFx0XHRcdFx0XHRhcmdzLnB1c2gobmV3QXJnc1tpXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdpbmRvdy5nYS5hcHBseShudWxsLCBhcmdzKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0ZWwub24oJ2NsaWNrJywgcmVwb3J0RXZlbnQpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0c2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGVsLm9uKCdvZmYnLHJlcG9ydEV2ZW50KTtcblx0XHRcdH0pO1xuXG5cdFx0XHR9XG5cdFx0fTtcblx0fV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ0VNTE1ha2VyJylcbi5kaXJlY3RpdmUoJ2h0bWxWaWV3ZXInLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICB0ZW1wbGF0ZTogJzxkaXY+PG9sIHN0YXJ0PVwie3tpdGVtLmxpbmV9fVwiPjxsaSBuZy1yZXBlYXQ9XCJsbiBpbiBjb2RlKGl0ZW0pIHRyYWNrIGJ5ICRpbmRleFwiIG5nLWJpbmQtaHRtbD1cImxuXCI+PC9saT48L29sPjwvZGl2PicsXG4gICAgc2NvcGU6IHtpdGVtOiBcIj1cIn0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRyKXtcbiAgICAgIHNjb3BlLmNvZGUgPSBmdW5jdGlvbihjKXtcbiAgICAgICAgdmFyIGIgPSAoYy5kaXNwbGF5Rm9ybWF0dGVkVVJMKCkpLnNwbGl0KC9cXDxiclxcPnxcXG4vZyk7XG4gICAgICAgIHJldHVybiBiO1xuICAgICAgfTtcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG5cblxuICAgIH0pO1xuICB9XG59O1xuXG5cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdFTUxNYWtlcicpXG4uZGlyZWN0aXZlKCdtZXNzYWdlQ2VudGVyJywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJFXCIsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibWVzc2FnZS1jZW50ZXJcIj48ZGl2IGNsYXNzPVwidWkgdGlueSBzZWNvbmRhcnkgbWVudVwiPlxcXG4gICAgPGRpdiBjbGFzcz1cIml0ZW0gbW51LXRpdGxlXCIgc3R5bGU9XCJwYWRkaW5nLWxlZnQ6MDtcIj57e2hlYWRpbmcgPT09IHVuZGVmaW5lZCA/IFwiTUVTU0FHRVM6XCIgOiBoZWFkaW5nIH19PC9kaXY+XFxcbiAgICA8YSBjbGFzcz1cIml0ZW1cIiBuZy1jbGljaz1cIkludGVsbGlnZW5jZUNlbnRlci5zZXRUeXBlKFxcJ1xcJylcIiBuZy1jbGFzcz1cInthY3RpdmU6IEludGVsbGlnZW5jZUNlbnRlci5zZWFyY2gudHlwZT09XFwnXFwnfVwiIG5nLXNob3c9XCJJbnRlbGxpZ2VuY2VDZW50ZXIuY2FuVmlld0FsbCgpXCI+QWxsIDxzcGFuIGNsYXNzPVwidWkgdGlueSBsYWJlbFwiPnt7ZXJyb3JzLm1lc3NhZ2VzLmxlbmd0aH19PC9zcGFuPjwvYT5cXFxuICAgIDxhIGNsYXNzPVwiaXRlbVwiIG5nLXJlcGVhdD1cIih0YWIsdmFsKSBpbiBlcnJvcnMudGFicyB0cmFjayBieSAkaW5kZXhcIiBuZy1zaG93PVwiZXJyb3JzLmNvdW50W3RhYl1cIiBuZy1jbGljaz1cIkludGVsbGlnZW5jZUNlbnRlci5zZXRUeXBlKHZhbClcIiBuZy1jbGFzcz1cInthY3RpdmU6IEludGVsbGlnZW5jZUNlbnRlci5zZWFyY2gudHlwZT09dmFsfVwiPnt7dGFiIHwgdW5jYW1lbGl6ZX19IDxzcGFuIGNsYXNzPVwidWkgdGlueSBsYWJlbFwiPnt7ZXJyb3JzLmNvdW50W3RhYl19fTwvc3Bhbj48L2E+XFxcbiAgICA8L2Rpdj5cXFxuICAgIDxkaXYgaWQ9XCJlcnJvci1tZXNzYWdlcy1saXN0XCIgY2xhc3M9XCJ1aSBtaWRkbGUgYWxpZ25lZCBkaXZpZGVkIGxpc3RcIj5cXFxuICAgICAgPG1lc3NhZ2UtaXRlbSBpdGVtPVwiaXRlbVwiIGNsYXNzPVwiaXRlbVwiIG5nLXJlcGVhdD1cIm9iaiBpbiBlcnJvcnMubWVzc2FnZXMgfCBmaWx0ZXI6IEludGVsbGlnZW5jZUNlbnRlci5zZWFyY2hcIiBlcnJvcj1cIm9ialwiPjwvbWVzc2FnZS1pdGVtPlxcXG4gICAgICA8L2Rpdj5cXFxuICAgICAgPGRpdiBhbGlnbj1cImNlbnRlclwiIHN0eWxlPVwibWFyZ2luLXRvcDogLTEuNWVtOyBwYWRkaW5nLWJvdHRvbTogMS41ZW07XCIgbmctc2hvdz1cIkludGVsbGlnZW5jZUNlbnRlci5zZWFyY2gudHlwZSE9PVxcJ1xcJyAmJiBJbnRlbGxpZ2VuY2VDZW50ZXIuY2FuVmlld0FsbCgpXCI+XFxcbiAgICAgIDxidXR0b24gY2xhc3M9XCJ1aSB0aW55IGJhc2ljIGJ1dHRvblwiIG5nLWNsaWNrPVwiSW50ZWxsaWdlbmNlQ2VudGVyLnNldFR5cGUoXFwnXFwnKVwiPjxpIGNsYXNzPVwibWludXMgc3F1YXJlIGljb25cIj48L2k+IFJlbW92ZSBmaWx0ZXI8L2J1dHRvbj48L2Rpdj5cXFxuICAgIDwvZGl2PicsXG4gICAgc2NvcGU6IHtcbiAgICAgIGVycm9yczpcIj1cIixcbiAgICAgIGhlYWRpbmc6XCJAXCIsXG4gICAgICBpdGVtOlwiPVwiXG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHIpe1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBzY29wZS5JbnRlbGxpZ2VuY2VDZW50ZXIgPSBuZXcgRU1MTWFrZXJJbnRlbGxpZ2VuY2UuSW50ZWxsaWdlbmNlQ2VudGVyKHNjb3BlLmVycm9ycywgc2NvcGUpO1xuXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpe1xuICAgICAgICAgIC8vIGpRdWVyeShlbCkucG9wdXAoXCJkZXN0cm95XCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcblxuXG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnRU1MTWFrZXInKVxuLmRpcmVjdGl2ZSgnbWVzc2FnZUl0ZW0nLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICB0ZW1wbGF0ZTogJzxkaXYgbmctY2xhc3M9XCJtZXNzYWdlQ2xzXCIgY2xhc3M9XCJpbnRlbC1tc2dcIj5cXFxuICAgIDxkaXYgY2xhc3M9XCJyaWdodCBmbG9hdGVkIGNvbnRlbnRcIiBuZy1pZj1cImVycm9yLmN0YUxhYmVsIT09XFwnXFwnXCIgPlxcXG4gICAgPGRpdiBjbGFzcz1cInVpIHNtYWxsIGNvbXBhY3RcIiBcXFxuICAgIG5nLWNsYXNzPVwiYnV0dG9uQ2xzXCIgbmctaWY9XCJidXR0b25DbHNcIiBcXFxuICAgIFxcIG5nLWNsaWNrPVwiZXhlY3V0ZUFjdGlvbihpdGVtKVwiIFxcXG4gICAgIG5nLWJpbmQtaHRtbD1cImVycm9yLmN0YUxhYmVsXCI+e3tlcnJvci5jdGFMYWJlbCA/IGVycm9yLmN0YUxhYmVsIDogXCJSZXNvbHZlXCJ9fTwvZGl2PlxcXG4gICAgPC9kaXY+XFxcbiAgICA8ZGl2IGNsYXNzPVwicmlnaHQgZmxvYXRlZCBjb250ZW50XCIgbmctaWY9XCJlcnJvci5jbGVhblR5cGU9PVxcJ1FBXFwnXCIgPlxcXG4gICAgPHNwYW4gY2xhc3M9XCJ1aSBpY29uIGxhYmVsXCIgbmctc2hvdz1cImVycm9yLmNsZWFuVHlwZT09XFwnUUFcXCcmJmVycm9yLm92ZXJyaWRlXCI+PGkgY2xhc3M9XCJ0aHVtYnMgdXAgaWNvblwiPjwvaT4gWU9VIENPTkZJUk1FRDwvc3Bhbj5cXFxuICAgIDxkaXYgY2xhc3M9XCJ1aSBzbWFsbCBjb21wYWN0XCIgXFxcbiAgICBuZy1jbGFzcz1cImJ1dHRvbkNsc1wiIG5nLWlmPVwiYnV0dG9uQ2xzXCIgbmctaGlkZT1cImVycm9yLm92ZXJyaWRlXCIgXFxcbiAgICBcXCBuZy1jbGljaz1cImVycm9yLnNldE92ZXJyaWRlU3RhdHVzKHRydWUpO2V4ZWN1dGVBY3Rpb24oaXRlbSlcIj48aSBjbGFzcz1cImNoZWNrIGljb25cIj48L2k+IENvbmZpcm08L2Rpdj5cXFxuICAgIDwvZGl2PlxcXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiIG5nLXNob3c9XCJidXR0b25DbHNcIj4gXFxcbiAgICAgICAgPGg0IG5nLWJpbmQtaHRtbD1cImVycm9yLnRpdGxlIHwgZGV3aWRvd1wiPjwvaDQ+XFxcbiAgICAgICAgPGRpdiBuZy1iaW5kLWh0bWw9XCJlcnJvci5kZXNjcmlwdGlvblwiPjwvZGl2PjwvZGl2PlxcXG4gICAgICAgIDxkaXYgbmctaWY9XCJlcnJvci5zdWdnZXN0aW9uLmxlbmd0aD4wXCIgbmctaGlkZT1cImVycm9yLm92ZXJyaWRlXCIgY2xhc3M9XCJzdWdnZXN0aW9uXCI+U1VHR0VTVElPTjogPGRpdiBuZy1iaW5kLWh0bWw9XCJlcnJvci5zdWdnZXN0aW9uXCI+PC9kaXY+PC9kaXY+XFxcbiAgICAgICAgPGRpdiBuZy1pZj1cImVycm9yLnJlc291cmNlIT09XFwnXFwnXCI+PGEgbmctaHJlZj1cInt7ZXJyb3IucmVzb3VyY2V9fVwiIHRhcmdldD1cIl9ibGFua1wiPnt7ZXJyb3IucmVzb3VyY2VUZXh0fX0gPGkgY2xhc3M9XCJleHRlcm5hbCBhbHRlcm5hdGUgaWNvblwiPjwvaT48L2E+PC9kaXY+XFxcbiAgICA8L2Rpdj4nLFxuICAgIHNjb3BlOiB7ZXJyb3I6IFwiPVwiLCBpdGVtOlwiPVwifSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHIpe1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGNscyA9IFtcIlwiLCBcInJlZFwiLCBcIm9yYW5nZVwiLCBcInZpb2xldFwiLCBcInRlYWxcIiwgXCJibHVlXCJdO1xuXG5cbiAgICAgICAgLy8gZW51bSBFcnJvclR5cGUge1xuICAgICAgICAvLyAgIEZpeD0xLFxuICAgICAgICAvLyAgIFdhcm4sXG4gICAgICAgIC8vICAgU3VnZ2VzdGlvbixcbiAgICAgICAgLy8gICBRQSxcbiAgICAgICAgLy8gICBCZXN0UHJhY3RpY2VcbiAgICAgICAgLy8gfVxuXG5cbiAgICAgICAgLy8gXCJcIixcbiAgICAgICAgLy8gXCJyZWRcIixcbiAgICAgICAgLy8gXCJvcmFuZ2VcIixcbiAgICAgICAgLy8gXCJ2aW9sZXRcIixcbiAgICAgICAgLy8gXCJ5ZWxsb3dcIixcbiAgICAgICAgLy8gXCJcIlxuICAgICAgICBzY29wZS5leGVjdXRlQWN0aW9uID0gZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHNjb3BlLmVycm9yLmN0YUhhbmRsZXIoaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LDEwMCk7XG5cblxuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLmJ1dHRvbkNscyA9IFtjbHNbc2NvcGUuZXJyb3Iuc2V2ZXJpdHldLFwiYnV0dG9uXCJdLmpvaW4oXCIgXCIpO1xuICAgICAgICBpZihzY29wZS5lcnJvci5jbGVhblR5cGU9PVwiUUFcIiAmJiBzY29wZS5lcnJvci5vdmVycmlkZSkge1xuICAgICAgICAgIHNjb3BlLm1lc3NhZ2VDbHMgPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjb3BlLm1lc3NhZ2VDbHMgPSBbXCJ0eXBlLVwiLHNjb3BlLmVycm9yLnR5cGUsXCIgbGV2ZWwtXCIsc2NvcGUuZXJyb3Iuc2V2ZXJpdHldLmpvaW4oXCJcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAvLyBqUXVlcnkoZWwpLnBvcHVwKFwiZGVzdHJveVwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cblxufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ0VNTE1ha2VyJylcbi5kaXJlY3RpdmUoJ21lc3NhZ2VzTm90aWZ5JywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJFXCIsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWkgZmx1aWQgbGFiZWxlZCBidXR0b25cIiBuZy1jbGljaz1cIm5nQ2xpY2soKVwiIG5nLWNsYXNzPVwie1xcJ2FuaW1hdGUtdGFkYVxcJzogZG9BbmltYXRpb259XCI+XFxcbiAgICAgIDxkaXYgY2xhc3M9XCJ1aSBmbHVpZCBidXR0b25cIiBuZy1jbGFzcz1cIntcXCd5ZWxsb3dcXCc6ZG9BbmltYXRpb24sIFxcJ3JlZFxcJzogIXdvcmtzcGFjZS5pbnRlbGxpZ2VuY2UuY2FuQ29udGludWV9XCI+XFxcbiAgICAgICAgPGkgY2xhc3M9XCJ3YXJuaW5nIGljb25cIiBhbHQ9XCJbIV1cIiBuZy1zaG93PVwiIXdvcmtzcGFjZS5pbnRlbGxpZ2VuY2UuY2FuQ29udGludWVcIj48L2k+XFxcbiAgICAgICAgPGkgY2xhc3M9XCJpbmZvIGljb25cIiBhbHQ9XCIoaSlcIiBuZy1zaG93PVwid29ya3NwYWNlLmludGVsbGlnZW5jZS5jYW5Db250aW51ZVwiPjwvaT5cXFxuICAgICAgICB7eyBjb3VudD4xID8gXCJNZXNzYWdlc1wiIDogXCJNZXNzYWdlXCJ9fVxcXG4gICAgICAgIDwvZGl2PlxcXG4gICAgICA8ZGl2IGNsYXNzPVwidWkgbGFiZWxcIiBuZy1jbGFzcz1cIntcXCd5ZWxsb3dcXCc6ZG9BbmltYXRpb24sIFxcJ3JlZFxcJzogIXdvcmtzcGFjZS5pbnRlbGxpZ2VuY2UuY2FuQ29udGludWV9XCI+XFxcbiAgICAgICAge3tjb3VudH19XFxcbiAgICAgICAgPC9kaXY+XFxcbiAgICAgIDwvZGl2PlxcXG4gICAgICA8L2Rpdj4nLFxuICAgIHNjb3BlOiB7XG4gICAgICB3b3Jrc3BhY2U6IFwiPVwiLFxuICAgICAgbmdDbGljazogXCImXCIsXG4gICAgICBjb3VudDogXCI9XCJcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cil7XG4gICAgICBzY29wZS5kb0FuaW1hdGlvbiA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgICAgIHNjb3BlLmRvQW5pbWF0aW9uID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfSwgMTUwMCk7XG4gICAgICBzY29wZS4kd2F0Y2goXCJjb3VudFwiLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUsIHNjb3BlKXtcbiAgICAgICAgaWYobmV3VmFsdWUgPiBvbGRWYWx1ZSkge1xuXG4gICAgICAgICAgICBzY29wZS5kb0FuaW1hdGlvbiA9IHRydWU7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlVQREFURURcIik7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHNjb3BlLmRvQW5pbWF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0sMTUwMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2NvcGUuZG9BbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMjAwMCk7XG5cbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgLy8galF1ZXJ5KGVsKS5wb3B1cChcImRlc3Ryb3lcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdFTUxNYWtlcicpXG4uZGlyZWN0aXZlKCduZ0NoYW5nZUxhenknLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpe1xuXHRyZXR1cm4ge1xuXHRcdHJlc3RyaWN0OiBcIkFcIixcblx0XHQvLyB0cmFuc2NsdWRlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRuZ01vZGVsOlwiPVwiLFxuXHRcdFx0bmdDaGFuZ2VMYXp5OlwiJlwiLFxuXHRcdFx0Y2hhbmdlTGF6eUJ1ZmZlcjpcIj1cIixcblx0XHRcdGRhdGFUcmFuc2ZlckV2dDpcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRyKXtcblxuXHRcdFx0dmFyIHRpbWVyID0gbnVsbDtcblx0XHRcdCR0aW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciBsYXN0VmFsdWUgPSBzY29wZS5uZ01vZGVsLnRvU3RyaW5nKCk7XG5cdFx0XHRcdGVsLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lcik7XG5cdFx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZihzY29wZS5fX2xhc3RWYWx1ZSAhPT0gZWxbMF0udmFsdWUpe1xuXHRcdFx0XHRcdFx0c2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0c2NvcGUubmdDaGFuZ2VMYXp5KCk7XG5cdFx0XHRcdFx0XHRcdFx0c2NvcGUuX19sYXN0VmFsdWUgPSBzY29wZS5uZ01vZGVsLnRvU3RyaW5nKCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBhdHRyLmNoYW5nZUxhenlCdWZmZXI9PT0gdW5kZWZpbmVkID8gNTAwIDogYXR0ci5jaGFuZ2VMYXp5QnVmZmVyKjEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0c2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0ZWwub2ZmKCdrZXl1cCcpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0c2NvcGUuX19sYXN0VmFsdWUgPSBzY29wZS5uZ01vZGVsLnRvU3RyaW5nKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0fVxuXHRcdH07XG5cdH1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdFTUxNYWtlcicpXG4uZGlyZWN0aXZlKCdvblJldHVyblByZXNzJywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KXtcblx0cmV0dXJuIHtcblx0XHRyZXN0cmljdDogXCJBXCIsXG5cdFx0c2NvcGU6IHtcblx0XHRcdG9uUmV0dXJuUHJlc3M6XCImXCIsXG5cdFx0XHRkYXRhVHJhbnNmZXJFdnQ6XCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cil7XG5cblx0XHRcdCR0aW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGVsLm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdGlmKGUua2V5Q29kZT09MTMpe1xuXHRcdFx0XHRcdFx0c2NvcGUub25SZXR1cm5QcmVzcygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0c2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0ZWwub2ZmKCdrZXlwcmVzcycpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHR9XG5cdFx0fTtcblx0fV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ0VNTE1ha2VyJykuZGlyZWN0aXZlKCd1aVBvcHVwJywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KXtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBzY29wZToge3BvcHVwSWQ6XCJAXCIscG9wdXBCZWhhdmlvcjpcIkBcIn0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRyKXtcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBhcmdzID0ge1xuICAgICAgICAgIGhvdmVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBwb3B1cDogXCIjXCIgKyBhdHRyLnBvcHVwSWRcbiAgICAgICAgfTtcbiAgICAgICAgKGZ1bmN0aW9uKCQsIHNjb3BlLCBhdHRyKXtcbiAgICAgICAgICBpZihhdHRyLnBvcHVwQmVoYXZpb3IgIT09IHVuZGVmaW5lZCApIGFyZ3Mub24gPSBcImNsaWNrXCI7XG4gICAgICAgICAgaWYoYXR0ci5wb3B1cElkICE9PSB1bmRlZmluZWQgKSBhcmdzLnBvcHVwID0gXCIjXCIgKyBhdHRyLnBvcHVwSWQ7XG4gICAgICAgICAgJChlbCkucG9wdXAoYXJncyk7XG4gICAgICAgICAgaWYoYXR0ci5wb3B1cFNob3cgIT09IHVuZGVmaW5lZCApICQoZWwpLnBvcHVwKFwic2hvd1wiKTtcbiAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQoZWwpLnBvcHVwKFwiZGVzdHJveVwiKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9KShqUXVlcnksIHNjb3BlLCBhdHRyKVxuXG4gICAgfSk7XG4gIH1cbn07XG5cblxufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ0VNTE1ha2VyJylcbi5kaXJlY3RpdmUoJ3F1ZXJ5U3RyaW5nRWRpdG9yJywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJFXCIsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicXVlcnktc3RyaW5nLWVkaXRvciB3ZWxsLWNvbXBvbmVudFwiIG5nLWhpZGU9XCJpdGVtLmlzTGlua1R5cGUoXFwnbWFpbHRvXFwnKVwiPjxkaXYgc3R5bGU9XCJvdmVyZmxvdzpoaWRkZW47cGFkZGluZy1ib3R0b206LjVlbTtcIj48c3Ryb25nPlFVRVJZIFNUUklORyBFRElUT1I8L3N0cm9uZz5cXFxuICAgIDxkaXYgY2xhc3M9XCJ1aSB0aW55IGJhc2ljIGJ1dHRvbnNcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O1wiPlxcXG4gIDxidXR0b24gY2xhc3M9XCJ1aSBpY29uIGJ1dHRvblwiIG5nLWNsaWNrPVwiaXRlbS5uZXcuc2VhcmNoUGFyYW1zLmRlbGV0ZUFsbCgpO2l0ZW0uaXNMaW5rQ29tcGxldGUoKTtzY3JvbGxUb0l0ZW0oaXRlbS5pZCk7XCI+UmVtb3ZlIGFsbDwvYnV0dG9uPlxcXG4gIDxidXR0b24gY2xhc3M9XCJ1aSBpY29uIGJ1dHRvblwiIG5nLWNsaWNrPVwidmlldyA9PSAxID8gdmlldz0wIDogdmlldz0xXCI+e3t2aWV3PT0xPyBcIkNsb3NlXCIgOiBcIkVkaXRcIn19PC9idXR0b24+XFxcbjwvZGl2PjwvZGl2PlxcXG4gICAgIDxkaXYgbmctaWY9XCJpdGVtLm5ldy5zZWFyY2hQYXJhbXMuX2VudHJpZXMubGVuZ3RoPT0xJiZpdGVtLm5ldy5zZWFyY2hQYXJhbXMuX2VudHJpZXNbMF0ubGVuZ3RoPT0wXCI+UXVlcnkgc3RyaW5ncyB3aWxsIGFwcGVhciBoZXJlLjwvZGl2PlxcXG4gICAgICA8ZGl2IG5nLXNob3c9XCJ2aWV3PT0xXCI+XFxcbiAgICAgIDxkaXYgc3R5bGU9XCJtYXJnaW4tYm90dG9tOi41ZW07XCIgY2xhc3M9XCJ1aSBhY3Rpb24gaW5wdXRcIiBuZy1pZj1cInN0ci5sZW5ndGg+MFwiIG5nLXJlcGVhdD1cInN0ciBpbiBpdGVtLm5ldy5zZWFyY2hQYXJhbXMuZW50cmllcyB0cmFjayBieSAkaW5kZXhcIj5cXFxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmcta2V5dXA9XCJpdGVtLm5ldy5zZWFyY2hQYXJhbXMudXBkYXRlU2VhcmNoUHJvcCgpO2l0ZW0uaXNMaW5rQ29tcGxldGUoKVwiIG5nLW1vZGVsPVwiaXRlbS5uZXcuc2VhcmNoUGFyYW1zLl9lbnRyaWVzWyRpbmRleF1cIi8+XFxcbiAgICAgIDxidXR0b24gY2xhc3M9XCJ1aSBpY29uIGJ1dHRvblwiIG5nLWNsaWNrPVwiaXRlbS5uZXcuc2VhcmNoUGFyYW1zLmRlbGV0ZUF0SW5kZXgoJGluZGV4KVwiPlxcXG4gICAgICBSZW1vdmU8L2J1dHRvbj48L2Rpdj5cXFxuICAgICAgPC9kaXY+XFxcbiAgICAgIDxkaXYgbmctc2hvdz1cInZpZXc9PTBcIj5cXFxuICAgICAgPHVsIGNsYXNzPVwidGFncy1sYXlvdXRcIj5cXFxuICAgICAgIDxsaSBuZy1pZj1cInN0ci5sZW5ndGg+MFwiIG5nLXJlcGVhdD1cInN0ciBpbiBpdGVtLm5ldy5zZWFyY2hQYXJhbXMuZW50cmllcyB0cmFjayBieSAkaW5kZXhcIj5cXFxuICAgICAgIHt7c3RyfX0gPGEgaHJlZj1cImphdmFzY3JpcHQ6YW5ndWxhci5ub29wKClcIiBuZy1jbGljaz1cIml0ZW0ubmV3LnNlYXJjaFBhcmFtcy5kZWxldGVBdEluZGV4KCRpbmRleCk7aXRlbS5pc0xpbmtDb21wbGV0ZSgpXCI+XFxcbiAgICAgICA8aSBjbGFzcz1cImNsb3NlIGljb25cIiBhbHQ9XCJbWF1cIj48L2k+PC9hPjwvbGk+PC91bD5cXFxuICAgICAgIDwvZGl2PlxcXG4gICAgICA8L2Rpdj4nLFxuICAgIHNjb3BlOiB7aXRlbTpcIj1cIiwgc2Nyb2xsVG86XCImXCJ9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cil7XG4gICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgVmlldyA9IChmdW5jdGlvbihWaWV3KXtcbiAgICAgICAgICBWaWV3W1ZpZXdbXCJERUZBVUxUXCJdPTBdID0gXCJERUZBVUxUXCI7XG4gICAgICAgICAgVmlld1tWaWV3W1wiRURJVFwiXT0xXSA9IFwiRURJVFwiO1xuICAgICAgICAgIHJldHVybiBWaWV3O1xuICAgICAgICB9KSh7fSk7XG4gICAgICAgIHdpbmRvdy5xc19kZWJ1ZyA9IHNjb3BlO1xuICAgICAgICB2YXIgcG9pbnRlciA9IHNjb3BlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcG9pbnRlciA9IHBvaW50ZXIuJHBhcmVudDtcbiAgICAgICAgfSB3aGlsZSAocG9pbnRlci5zY3JvbGxUbyA9PT0gdW5kZWZpbmVkKTtcblxuICAgICAgICBzY29wZS5zY3JvbGxUb0l0ZW0gPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHBvaW50ZXIuc2Nyb2xsVG8ocGFyYW0tMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LDUwKTtcblxuXG4gICAgICAgIH1cbiAgICAgICAgc2NvcGUudmlldyA9IFZpZXcuREVGQVVMVDtcbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgLy8galF1ZXJ5KGVsKS5wb3B1cChcImRlc3Ryb3lcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdFTUxNYWtlcicpLmRpcmVjdGl2ZSgnc2Nyb2xsc3B5JywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KXtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHIpe1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoc2NvcGUuYWN0aXZlTGlua0lkID09PSB1bmRlZmluZWQpIHNjb3BlLmFjdGl2ZUxpbmtJZCA9IDE7XG4gICAgICAgIGlmKHNjb3BlLmlzU2Nyb2xsaW5nID09PSB1bmRlZmluZWQpIHNjb3BlLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG5cblxuICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgaWYoc2NvcGUuaXNTY3JvbGxpbmcgJiYgc2NvcGUuaXNTY3JvbGxpbmcgPT0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgdmFyIGlkID0galF1ZXJ5KGVsKS5hdHRyKFwiaWRcIikuc3BsaXQoXCItXCIpLnBvcCgpO1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2NvcGUuYWN0aXZlTGlua0lkID1pZCoxO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG4gICAgICAgIGpRdWVyeShlbCkudmlzaWJpbGl0eSh7XG4gICAgICAgICAgICBvbmNlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBzaXplIHdoZW4gbmV3IGNvbnRlbnQgbG9hZHNcbiAgICAgICAgICAgIG9ic2VydmVDaGFuZ2VzOiB0cnVlLFxuICAgICAgICAgICAgLy8gbG9hZCBjb250ZW50IG9uIGJvdHRvbSBlZGdlIHZpc2libGVcbiAgICAgICAgICAgIG9uVG9wVmlzaWJsZTogZnVuYyxcbiAgICAgICAgICAgIG9uVG9wUGFzc2VkUmV2ZXJzZTogZnVuY1xuXG5cbiAgICAgICAgICB9KTtcblxuXG5cblxuXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpe1xuICAgICAgICAgIC8vJChlbCkucG9wdXAoXCJkZXN0cm95XCIpO1xuICAgICAgICAgIGpRdWVyeShlbCkudmlzaWJpbGl0eShcImRlc3Ryb3lcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdFTUxNYWtlcicpXG4uZGlyZWN0aXZlKCdzaW1wbGVBY2NvcmRpb24nLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHNjb3BlOntoZWFkaW5nOlwiQFwiLHNob3c6IFwiPVwifSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgbmctY2xhc3M9XCJ7ZXhwYW5kZWQ6IHNob3csIGNvbGxhcHNlZDogIXNob3d9XCI+PGRpdiBuZy1jbGljaz1cInRvZ2dsZVBhbmUoKVwiIGNsYXNzPVwiYWNjb3JkaW9uLXRpdGxlXCI+XFxcbiAgICA8aSBjbGFzcz1cImNoZXZyb24gcmlnaHQgaWNvblwiIG5nLXNob3c9XCIhc2hvd1wiIGFsdD1cIlsrXVwiPjwvaT5cXFxuICAgIDxpIGNsYXNzPVwiY2hldnJvbiBkb3duIGljb25cIiBuZy1zaG93PVwic2hvd1wiIGFsdD1cIlstXVwiPjwvaT5cXFxuICAgICA8c3Bhbj57e2hlYWRpbmd9fTwvc3Bhbj48L2Rpdj48bmctdHJhbnNjbHVkZSBuZy1zaG93PVwic2hvd1wiPjwvbmctdHJhbnNjbHVkZT48L2Rpdj4nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cil7XG4gICAgICBzY29wZS5zaG93ID0gZmFsc2U7XG4gICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICBzY29wZS50b2dnbGVQYW5lID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICBzY29wZS5zaG93ID0gIXNjb3BlLnNob3c7XG4gICAgICAgIH07XG4gICAgICAgIGpRdWVyeS5leHRlbmQoalF1ZXJ5KGVsKSx7XCJ0b2dnbGVBY2NvcmRpb25cIjogZnVuY3Rpb24oKXtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNjb3BlLnRvZ2dsZVBhbmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX0pO1xuICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAvLyBqUXVlcnkoZWwpLnBvcHVwKFwiZGVzdHJveVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnRU1MTWFrZXInKS5kaXJlY3RpdmUoJ3N0aWNreScsIFsnJHRpbWVvdXQnLCBmdW5jdGlvbigkdGltZW91dCl7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRyKXtcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIGpRdWVyeShlbClcbiAgLnN0aWNreSh7XG4gICAgY29udGV4dDogJyNzdGlja3lwYXJlbnQnXG4gIH0pXG47XG5cbiAgdmFyIHJlc2l6ZVRpbWVyID0gbnVsbDtcblxuICB2YXIgUmVzaXplU3RpY2t5ID0gZnVuY3Rpb24oKXtcbiAgICByZXNpemVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHZhciBhID0gJCgnI3JpZ2h0LXBhbmVsJyk7XG4gICAgICB2YXIgYiA9IGEuZmluZCgnLnVpLnNlY29uZGFyeS52ZXJ0aWNhbC5wb2ludGluZy5tZW51Jyk7XG4gICAgICB2YXIgYyA9IGEuZmluZCgnLm1lc3NhZ2UtYXJlYScpO1xuICAgICAgYVswXS5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuICAgICAgLy8gY29uc29sZS5sb2coYS5oZWlnaHQoKSx3aW5kb3cuaW5uZXJIZWlnaHQsMjAwKTtcbiAgICAgIGlmKGFbMF0uY2xpZW50SGVpZ2h0ID4gKHdpbmRvdy5pbm5lckhlaWdodCAtICg3NSs2MCkpICl7XG4gICAgICAgIGFbMF0uc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gKDc1Kzc1KSArIFwicHhcIjtcbiAgICAgICAgYlswXS5zdHlsZS5oZWlnaHQgPSBhWzBdLmNsaWVudEhlaWdodCAtIGNbMF0uY2xpZW50SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICBiLmFkZENsYXNzKCdzY3JvbGxpbmcnKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3RvbyBiaWcnKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5yZW1vdmVDbGFzcygnc2Nyb2xsaW5nJyk7XG4gICAgICB9XG4gICAgICBqUXVlcnkoZWwpLnN0aWNreShcInJlZnJlc2hcIik7XG5cbiAgICB9LDMwMCk7XG5cbiAgfTtcblxuXG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBSZXNpemVTdGlja3kpO1xuICAgICQod2luZG93KS5vbignc2Nyb2xsJywgUmVzaXplU3RpY2t5KTtcblxuICAgIFJlc2l6ZVN0aWNreSgpO1xuXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpe1xuICAgICAgICAgIC8vJChlbCkucG9wdXAoXCJkZXN0cm95XCIpO1xuICAgICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZScsIFJlc2l6ZVN0aWNreSk7XG4gICAgICAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsJywgUmVzaXplU3RpY2t5KTtcbiAgICAgICAgICBqUXVlcnkoZWwpLnN0aWNreShcImRlc3Ryb3lcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdFTUxNYWtlcicpLmRpcmVjdGl2ZSgndGV4dGFyZWFFeHBhbmQnLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpe1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cil7XG4gICAgICB2YXIgYXV0b0V4cGFuZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xuXG4gICAgICBcdC8vIFJlc2V0IGZpZWxkIGhlaWdodFxuICAgICAgXHRmaWVsZC5zdHlsZS5oZWlnaHQgPSAnaW5oZXJpdCc7XG5cbiAgICAgIFx0Ly8gR2V0IHRoZSBjb21wdXRlZCBzdHlsZXMgZm9yIHRoZSBlbGVtZW50XG4gICAgICBcdHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGZpZWxkKTtcblxuICAgICAgXHQvLyBDYWxjdWxhdGUgdGhlIGhlaWdodFxuICAgICAgXHR2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpLCAxMClcbiAgICAgIFx0ICAgICAgICAgICAgICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSwgMTApXG4gICAgICBcdCAgICAgICAgICAgICArIGZpZWxkLnNjcm9sbEhlaWdodFxuICAgICAgXHQgICAgICAgICAgICAgKyBwYXJzZUludChjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpLCAxMClcbiAgICAgIFx0ICAgICAgICAgICAgICsgcGFyc2VJbnQoY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLWJvdHRvbS13aWR0aCcpLCAxMCk7XG5cbiAgICAgIFx0ZmllbGQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcblxuICAgICAgfTtcblxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgJChlbCkuY3NzKFwibWluLWhlaWdodFwiLCBcIjI1cHhcIik7XG4gICAgICAgIGF1dG9FeHBhbmQoJChlbCkuZ2V0KDApKTtcbiAgICAgICAgJChlbCkub24oJ2lucHV0IGNoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBcdGF1dG9FeHBhbmQoJChlbCkuZ2V0KDApKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuXG5cbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICQoZWwpLmRyb3Bkb3duKFwiZGVzdHJveVwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuXG59XSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
