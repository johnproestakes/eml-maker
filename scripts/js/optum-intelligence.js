EMLIntelligence.module("hyperlink").register("hyperlink-descriptive-ctas",["LinkObject",function(e){return{title:"Use descriptive CTAs",description:"\"Click here\" links aren't really descriptive enough to be effective CTAs. It's better to introduce a link by saying something like: <br>'Read the new <a href=\"javascript:angular.noop()\">Product brochure</a>.'",type:ErrorType.Warn,severity:ErrorSeverity.Low,canContinue:!0,when:function(){return e.context&&/click|click\shere/g.test(e.context)}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-has-spaces",["LinkObject",function(e){return{title:"This link has spaces",description:"Stuff like this breaks. Fix it now.",type:ErrorType.Fix,severity:ErrorSeverity.High,canContinue:!1,cta:{label:"Remove spaces",handler:function(){e["new"].url=e["new"].url.replace(/\s/g,"%20"),e.isLinkComplete()}},when:function(){return e["new"].contains(" ")}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-landing-page-preferred",["LinkObject",function(e){var n=GlobalVars.landingPagePreferred.test(e["new"].url);if(n){var t=e["new"].url.match(GlobalVars.landingPagePreferred);if(t.length>0)var i=t[0].toUpperCase().substr(1,t[0].length)}return{title:"Landing page preferred",description:["When you direct email ","traffic to ",/^[aeiouAEIOU]/gi.test(i)?"an ":"a ",i,", it's generally a good idea to serve the ",i," on"," a landing page with more information about the asset. This will also ","give you more analytics data, like session/visit duration and promote ","browsing other content."].join(""),type:ErrorType.BestPractice,severity:ErrorSeverity.High,canContinue:!0,when:function(){return n}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-no-shortlinks",["LinkObject",function(e){return{title:"Don't use shortlinks or vanity URLs in emails",description:"Always use the long link. Adding query string parameter to a vanity     url inside an email will not track appropriately.",type:e["new"].contains("optum.co")?ErrorType.Fix:ErrorType.BestPractice,severity:ErrorSeverity.High,canContinue:!e["new"].contains("optum.co"),when:function(){return/.com?(\.[a-z]{2,3})?\/([a-zA-Z0-9\-]+)\/*(\?.*)?$/.test(e["new"].url.trim())&&!e["new"].contains("info.optum")&&!/(twitter|linkedin|facebook|youtube)\.com?/.test(e["new"].url)}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-ofts-dont-use",["LinkObject",function(e){return{title:"We don't link to OFTs in emails we send.",description:"You should not be sending OFTs to external contacts.    OFTs only work with Outlook on PCs, and that is less     than half of the population of email clients these days.",type:ErrorType.BestPractice,severity:ErrorSeverity.High,canContinue:!0,when:function(){var n=e["new"].url.indexOf(".oft")>-1;return n}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-ofts-implement-ftac",["LinkObject",function(e){return{title:"Forward to a colleague?",description:"If you are trying to do a Forward to a Colleague (FTAC)   feature, forget doing that with an OFT. You can achieve    the same effect by using a mailto link. <br><br><em>NOTE:     You can leave the email address field blank for this one.      When the user clicks the link the email field will be empty,       so he/she can add their own recipients.</em>",type:ErrorType.Suggestion,severity:ErrorSeverity.Low,canContinue:!0,cta:{label:'<i class="wizard icon"></i> Try it?',handler:function(){e.mailto.email="",e.mailto.subject="I wanted you to see this",e.mailto.body="Check out this link\n\nhttps://www.yourlinkgoeshere.com",e.mailto.composeEmail(),e.mailto.initEmailEditor(),e.mailto.openEditor(),e.isLinkComplete(),window.ga("send","event","Suggestion","Use FTAC","Use FTAC")}},when:function(){return e["new"].url.indexOf(".oft")>-1}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-relative-path",["LinkObject",function(e){return{title:"This URL is not correct.",description:"/content/optum3/en/ is only for use in author in AEM, not on the live site.",type:ErrorType.Fix,severity:ErrorSeverity.High,canContinue:!1,when:function(){return/http(.*)\/content\/optum(.*)\.html/gi.test(e["new"].url)}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-style-matters",["LinkObject",function(e){return{title:"Style matters",description:"You should not put punctuation inside of a link unless it is a button, and even then it's a little weird.",type:ErrorType.BestPractice,severity:ErrorSeverity.Medium,canContinue:!0,cta:{label:"Move the punctuation",handler:function(){e.context=e.context.replace(GlobalVars.linkEncapsulatedPunctuation,"</a>$1"),e.isLinkComplete()}},when:function(){return GlobalVars.linkEncapsulatedPunctuation.test(e.context)}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-tracking-add-all",["LinkObject",function(e){var n=!1;return e.requiresTrackingCode()&&e.hasTrackingCode()&&e._super.mapLinkObjects(function(e){e.requiresTrackingCode()&&!e.hasTrackingCode()&&(n=!0)}),{title:"Need a hand?",description:"I noticed you added a tracking code to this link, great job.     If you want I can add the same tracking code to the other links in this email      which require tracking codes.",type:ErrorType.Suggestion,severity:ErrorSeverity.Low,canContinue:!0,cta:{label:'<i class="wizard icon"></i> Update all links',handler:function(){var n="";e["new"].searchParams.entries.forEach(function(t){e.hasTrackingCode(t)&&(n=t)}),e._super.mapLinkObjects(function(e){e.requiresTrackingCode()&&!e.hasTrackingCode()&&e["new"].searchParams.append(n)}),e._super.mapLinkObjects(function(e){e.isLinkComplete()}),window.ga("send","event","Suggestion","Cascade Tracking Code","Cascade Tracking Code")}},when:function(){return n}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-tracking-not-required",["LinkObject",function(e){var n=/^[aeiouAEIOU]/gi.test(i)?"an ":"a "+i,t=e["new"].url.match(GlobalVars.extDoesNotrequireTrackingCode);if(t&&t.length>0)var i=t[0].toUpperCase().substr(1,t[0].length),n=/^[aeiouAEIOU]/gi.test(i)?"an ":"a "+i;return{title:"Unnecessary tracking link",description:"It looks like you added a tracking code to "+n+" file.\n    In fact, you can only track web pages with these tracking codes.",type:ErrorType.Fix,severity:ErrorSeverity.High,canContinue:!1,cta:{label:'<i class="wizard icon"></i>Fix it now',handler:function(){for(var n=0;n<e["new"].searchParams.entries.length;n++)/[a-z]{1,4}=(.*?:){3,9}/gi.test(e["new"].searchParams.entries[n])&&e["new"].searchParams.deleteAtIndex(n),window.ga("send","event","Suggestion","Unnecessary tracking code","Remove Tracking Code");e["new"].searchParams.updateEntries(),e.isLinkComplete()}},when:function(){return GlobalVars.extDoesNotrequireTrackingCode.test(e["new"].url)&&e.hasTrackingCode()}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-tracking-required",["LinkObject",function(e){return{id:"optum-budurl-tracking-code-required",title:"This URL needs a tracking code.",description:"Create and add one to make this message go away.",type:ErrorType.Fix,severity:ErrorSeverity.High,canContinue:!1,cta:{label:'<i class="unlock alternate icon"></i> Do not track link',handler:function(){e.overrideTrackingRequirements(),e.isLinkComplete()}},when:function(){return e.whiteListedUrl!==e["new"].url&&e.needsTrackingCode()&&!e["new"].contains("optum.co/")}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-tracking-s-code",["LinkObject",function(e){return{title:"Are you tracking channel source with your form?",description:"If this link directs to a page with a form, consider adding      an s-code to the URL so you can populate a form field with       a value from the query string to track the channel source        of the form submission.<br><br><em>NOTE: You can change         the value of the s-code to whatever you'd like, but we'll          add the <code>s=email</code> by default.</em>",type:ErrorType.Suggestion,severity:ErrorSeverity.Low,cta:{label:'<i class="wizard icon"></i>Add S-Code',handler:function(){e["new"].searchParams.append("s=email"),e.isLinkComplete(),window.ga("send","event","Suggestion","Add s-code","s=email")}},when:function(){var n=e.requiresSCode(),t=e["new"].searchParams.has("s"),i=n&&!t;return i&&!t}}}]),EMLIntelligence.module("hyperlink").register("hyperlink-v-equals",["LinkObject",function(e){return{title:"V= cannot be used in emails.",description:"This query string parameter is reserved for vanity urls, and should never be used in an email.",type:ErrorType.Fix,severity:ErrorSeverity.High,canContinue:!1,cta:{label:"Remove parameter",handler:function(){e["new"].searchParams["delete"]("v"),e.isLinkComplete()}},when:function(){return e["new"].searchParams.has("v")}}}]);
//# sourceMappingURL=data:application/json;base64,
