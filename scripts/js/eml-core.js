function getOfflineVersionNumber(){var e="";if(window.location.search.indexOf("offline_version")){var t=window.location.search.substr(1,window.location.search.length).split("&");t.forEach(function(t){t.indexOf("offline_version=")>-1&&(e=t.substr("offline_version=".length,t.length))})}return e}var ErrorSeverity;!function(e){e[e.High=1]="High",e[e.Medium=2]="Medium",e[e.Low=3]="Low",e[e.Zero=4]="Zero"}(ErrorSeverity||(ErrorSeverity={}));var ErrorType;!function(e){e[e.Fix=1]="Fix",e[e.Warn=2]="Warn",e[e.Suggestion=3]="Suggestion",e[e.QA=4]="QA",e[e.BestPractice=5]="BestPractice"}(ErrorType||(ErrorType={}));var GlobalVars;!function(e){e.landingPagePreferred=/(\.mp4|\.avi|\.mpeg|\.mp3|\.swf|\.mov|\.pdf)/i,e.extDoesNotrequireTrackingCode=/(\.pdf|\.oft|\.ics|\.png|\.jpeg|\.jpg)/i,e.linkEncapsulatedPunctuation=/([\.\?\,\:\*]+)((\n|\r|\s)+)?<\/a>$/,e.RequiresSCodeRegex=/http(.*)optum(.*)\/(campaign|resource)/i,e.RequiresTrackingCodeRegex=RegExp("^http(s)?://(.*?)?optum(.*?)?.co[m.]?"),e.TelephoneRegex=/(\+?\d{1,2}(\s|-|\.))?\(?\d{3}\)?[\s.-]\d{3,}[\s.-]\d{4,}/,e.TelephoneRegexGlobal=/(\+?\d{1,2}(\s|-|\.))?\(?\d{3}\)?[\s.-]\d{3,}[\s.-]\d{4,}/g,e.EmailRegex=/(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))/,e.EmailRegexGlobal=/(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))/g,e.UrlRegex=/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[\/?#]\S*)?$/i,e.LinkHasTitleTagRegexGlobal=/<a\s([^<]*)title=\"(.*?)\">/gi,e.PreheaderRegexGlobal=/\<p\s[^\<]*class=\"preheader\"[^\>]*\>/gi,e.RequiredTrackingCodeWhitelist=[".pdf",".ics",".oft","optumsurveys.co","healthid.optum.com","learning.optum.com","app.info.optum.com","optum.webex.com","twitter.com","facebook.com","linkedin.com","info.optum"]}(GlobalVars||(GlobalVars={}));var EMLModule;!function(e){var t=function(){function e(e){this.parent=e,this.email="",this.subject="",this.body="",this.parent.isLinkType("mailto")&&this.initEmailEditor()}return e.prototype.has=function(e){return this.updateMailtoObj(),this[e]&&""!==this[e].trim()},e.prototype.isValidEmailAddress=function(){return GlobalVars.EmailRegex.test(this.email)},e.prototype.deinitEmailEditor=function(){this.email="",this.subject="",this.body=""},e.prototype.composeEmail=function(){this.parent["new"].url="mailto:"+this.email;for(var e=["subject","body"],t=0;t<e.length;t++)this[e[t]]&&""!==this[e[t]]?this.parent["new"].searchParams.set(e[t],this[e[t]]):""==this[e[t]]&&this.parent["new"].searchParams["delete"](e[t])},e.prototype.updateMailtoObj=function(){var e=this,t=this.parent["new"].url.substr(7,this.parent["new"].url.length-7),i=t.split("?");this.email=i[0],this.parent["new"].searchParams.updateEntries(),i.length>1?["subject","body"].forEach(function(t){e.parent["new"].searchParams.has(t)&&(e[t]=window.decodeURIComponent(e.parent["new"].searchParams.get(t)))}):(this.subject="",this.body="")},e.prototype.inputOnBlur=function(){this.parent["new"].searchParams.updateEntries(),this.parent["new"].searchParams.updateSearchProp()},e.prototype.openEditor=function(){this.initEmailEditor();var e=this.parent;console.log(e.id-1),e.showMailtoEditor=!0},e.prototype.initEmailEditor=function(){this.updateMailtoObj()},e}();e.MailtoLinkObject=t;var i=function(){function e(e){this.href="",this.search="",this.origin="",this.hash="",this.protocol="",this.url=e,this.searchParams=new r(this)}return e.prototype.prepareExport=function(){},e.prototype.isValid=function(){return GlobalVars.UrlRegex.test(this.url)},e.prototype.contains=function(e){return this.url.indexOf(e)>-1},Object.defineProperty(e.prototype,"url",{get:function(){this.prepareExport();var e=this.origin+this.search+this.hash;return e=e.replace("?undefined","")},set:function(e){this.search="",this.hash="";var t=/^(https?|mailto|ftp)\:/gi;if(t.test(e)){var i=e.match(t);this.protocol=i[0]}if(this.href=e,"#"==e.trim())this.hash="#";else if(e.trim().length>1&&e.indexOf("#")>-1){var r=e.split("#");this.hash="#"+r.pop();var n=r.join("#").split("?");this.origin=n[0],this.search=n.length>0?"?"+n[1]:""}else if(e.indexOf("?")>-1){var n=e.split("?");this.origin=n[0],this.search=n.length>0?"?"+n[1]:""}else this.origin=e},enumerable:!0,configurable:!0}),e}();e.URLObj=i;var r=function(){function e(e){this.parent=e,this.parent.search.length>0?this._entries=this.parent.search.substr(1,this.parent.search.length).split(/\&amp\;|\&/g):this._entries=[]}return Object.defineProperty(e.prototype,"entries",{get:function(){for(var e=[],t=0;t<this._entries.length;t++){var i=this._entries[t].split("=");i.length>1&&(i[1]=decodeURIComponent(i[1])),e.push(i.join("="))}return e},enumerable:!0,configurable:!0}),e.prototype.updateEntries=function(){if(this._entries=[],"?"!==this.parent.search&&this.parent.search.length>1)for(var e=this.parent.search.substr(1,this.parent.search.length).split(/\&amp\;|\&/g),t=0;t<e.length;t++)this._entries.push(e[t])},e.prototype.updateSearchProp=function(){var e=[];if(this._entries.length>0)for(var t=0;t<this._entries.length;t++){var i=this._entries[t].split("=");/[a-z]{1,4}=(.*?:){3,9}/gi.test(this._entries[t])?e.push(this._entries[t]):e.push(i[0]+(i.length>1?"="+encodeURIComponent(decodeURIComponent(i[1])):""))}this.parent.search=e.length>0?"?"+e.join("&"):""},e.prototype.has=function(e){for(var t=new RegExp("^"+e+"=","g"),i=!1,r=0;r<this._entries.length;r++)t.test(this._entries[r])&&(i=!0);return i},e.prototype.get=function(e){for(var t=new RegExp("^"+e+"=","g"),i=!1,r=0;r<this._entries.length;r++)t.test(this._entries[r])&&(i=this._entries[r].split("=").pop());return i},e.prototype.set=function(e,t){for(var i=new RegExp("^"+e+"=","g"),r=!1,n=0;n<this._entries.length;n++)i.test(this._entries[n])&&(this._entries[n]=e+"="+t,r=!0);r||this.append(e+"="+t),this.updateSearchProp()},e.prototype.append=function(e){this._entries.push(e),this.updateSearchProp()},e.prototype.deleteAll=function(){this._entries=[],this.updateSearchProp()},e.prototype.deleteAtIndex=function(e){this._entries.splice(e,1),this.updateSearchProp()},e.prototype["delete"]=function(e){for(var t=0;t<this._entries.length;t++)this._entries[t].substr(0,e.length+1)==e+"="&&this.deleteAtIndex(t)},e}();e.URLObjSearchParams=r;var n=function(){function e(e,t){this.context=t,this._super=e;for(var i=["src","alt","height","width"],r=0,n=i;r<n.length;r++){var s=n[r],o=new RegExp(s+'="([^"].*?)?"',"i");o.test(t)&&(this[s]=t.match(o)[1])}var a=this.width&&parseInt(this.width.toString()),h=this.height&&parseInt(this.height.toString());a&&h||"string"==typeof this.src&&this.preloadImage(this.src)}return e.prototype.preloadImage=function(e){var t=this,i=new Image;i.onload=function(){t.height=i.height,t.width=i.width,console.log(i.height,i.width),i.parentNode.removeChild(i)},i.src=t.src,console.log(i),document.body.appendChild(i)},e.prototype.generateOutput=function(e){var t=this;return e=this.context.indexOf("alt")>-1?e.replace(this.context,function(e){return e.replace(/alt\=\"([^\"].*?)?\"/g,'alt="'+(void 0===t.alt?"":t.alt)+'"')}):e.replace(this.context,function(e){return e.replace("<img",'<img alt="'+(void 0===t.alt?"":t.alt)+'"')})},e}();e.LinkedImage=n;var s=function(){function e(e,i,r){this.__isComplete=!1,this._super=r,this.showQueryStringEditor=!1,this.showMailtoEditor=!1,this.id=0,this.line=e+1,this.context=i,this.queryStrings=[],this.ChangeMonitor=new o(this),this.errors=EMLIntelligence.module("hyperlink").monitor(),this.errors.associateVariable("LinkObject",this),this.whiteListedUrl="~~whitelist~~",this.__locateHref(i),this.__locateLinkedImage(i),this.mailto=new t(this),this.isLinkComplete()}return e.prototype.__locateHref=function(e){var t=/href\=\"([^\"\>]*)\"/g,r=e.match(t);r.length>0&&('href=""'==r[0]?(this["new"]=new i("#"),this.old=new i("#"),this.context=this.context.replace(new RegExp('href=""',"g"),'href="#"')):(this["new"]=new i(r[0].substr(6,r[0].length-7).trim()),this.old=new i(r[0].substr(6,r[0].length-7).trim())))},e.prototype.__locateLinkedImage=function(e){if(/\<img([^>].*?)\>/.test(e)){var t=e.match(/\<img([^>].*?)\>/);t.length>0&&(this.LinkedImage=new n(this,t[0]),this.LinkedImageOld=new n(this,t[0]))}},e.prototype.hasDuplicateQueryStrings=function(){var e=[],t=[];if(this["new"].searchParams.entries.length>0)for(var i=0,r=this["new"].searchParams.entries;i<r.length;i++){var n=r[i],s=n.split("=").shift();t.indexOf(s)>-1&&e.push(s),t.push(s)}return e.length>0&&e},e.prototype.overrideTrackingRequirements=function(){this.whiteListedUrl=this["new"].url},e.prototype.displayFormattedURL=function(){var e=this.context;e=e.replace(/\seml\-id\=\"([0-9]*)\"/,"");var t='href="',i=e.indexOf(t);return e=e.replace(new RegExp('href=""',"g"),'href="#"'),this.LinkedImage&&(e=this.LinkedImage.generateOutput(e)),e=e.substr(0,i)+t+"|||a.href|||"+e.substr(i+(t.length+this.old.url.length),e.length),e=e.replace(new RegExp('"',"g"),"&quot;"),e=e.replace(new RegExp("/","g"),"&#47;"),e=e.replace(new RegExp(">","g"),"&gt;"),e=e.replace(new RegExp("<","g"),"&lt;"),e=e.replace(/([^\s]*?)\=/g,'<span class="attr">$1</span><span class="keyword">=</span>'),e=e.replace(/\&quot\;\&gt\;/g,'&quot;<span class="tag">&gt;</span>'),e=e.replace(/\&\#47\;\&gt\;/g,'<span class="tag">&#47;&gt;</span>'),e=e.replace(/\&quot\;(.*?)\&quot\;/g,'<span class="value">"$1"</span>'),e=e.replace(/\&lt\;([a-z]+\s?)/g,'<span class="tag">&lt;$1</span>'),e=e.replace(/\&lt\;\&\#47\;([a-z]+\s?)\&gt\;/g,'<span class="tag">&lt;&#47;$1&gt;</span>'),e=e.replace(/\n/g,"<br>"),e=e.replace(/\&gt\;/g,'<span class="tag">&gt;</span>'),e=e.replace(/\s{3}/g,"&nbsp;&nbsp;&nbsp"),e=e.replace(/\|\|\|a\.href\|\|\|/g,"<strong>"+(this.hasOwnProperty("deleteOnRender")&&this.deleteOnRender?this.old.url:this["new"].url)+"</strong>")},e.prototype.isLinkComplete=function(){return this._super.intelligence.evaluateRules(),this.errors.evaluateRules(),this.ChangeMonitor.update(),this.__isComplete=this.errors.canContinue,this.hasOwnProperty("deleteOnRender")&&this.deleteOnRender&&(this.__isComplete=!0),this.__isComplete},e.prototype.isLinkType=function(e){var t=!1;switch(e){case"http":"http:"!=this["new"].protocol&&"https:"!=this["new"].protocol||(t=!0);break;case"mailto":"mailto:"==this["new"].protocol&&(t=!0)}return t},e.prototype.hasTrackingCode=function(e){void 0===e&&(e=this["new"].url);var t=/[a-z]{1,4}=(.*?:){3,9}/gi;return t.test(e)},e.prototype.requiresTrackingCode=function(e){var t=!1;if(GlobalVars.RequiresTrackingCodeRegex.test(this["new"].url)){t=!0;for(var i=0;i<GlobalVars.RequiredTrackingCodeWhitelist.length;i++)GlobalVars.RequiredTrackingCodeWhitelist[i]instanceof RegExp?GlobalVars.RequiredTrackingCodeWhitelist[i].test(this["new"].url)&&(t=!1):this["new"].url.indexOf(GlobalVars.RequiredTrackingCodeWhitelist[i])>-1&&(t=!1)}return t},e.prototype.requiresSCode=function(){return!!GlobalVars.RequiresSCodeRegex.test(this["new"].url)},e.prototype.needsTrackingCode=function(){var e=this.requiresTrackingCode();return this.whiteListedUrl!=this["new"].url&&(this.hasTrackingCode()&&(e=!1),e)},e.prototype.updateInput=function(){this.isLinkType("mailto")?this.mailto.updateMailtoObj():this["new"].searchParams.updateEntries(),this.isLinkComplete()},e}();e.LinkObject=s;var o=function(){function e(e){this.visible=!1,this._super=e,this.messages=[]}return e.prototype.compareOldAndNew=function(){var e=["protocol","origin","search","hash"],t=[],i=this._super;return e.forEach(function(e){i.old.hasOwnProperty(e)&&i.old[e]!==i["new"][e]&&t.push(e)}),i.LinkedImage&&i.LinkedImage.alt!==i.LinkedImageOld.alt&&t.push("alt"),t},e.prototype.beforeDidReturnChanges=function(){},e.prototype.afterDidReturnChanges=function(){},e.prototype.update=function(){if(0==this._super.readOnly){var e=[],t=this.compareOldAndNew(),i=this;t.forEach(function(t){e.push(i.articulateChanges(t,{}))}),this.messages=e}},e.prototype.compareSearchStrings=function(e,t){var i={added:[],updated:[],removed:[]};for(var r in e)t.indexOf(e[r])===-1&&i.removed.push(e[r]);for(r in t)e.indexOf(t[r])===-1&&i.added.push(t[r]);var n=function(e,t){for(var i=-1,r=0;r<t.length;r++)e.test(t[r])&&(i=r);return i};for(r in e){var s=new RegExp(e[r].split("=")[0]+"="),o=n(s,i.added);if(o>-1){i.updated.push(i.added[o]);var a=n(s,i.removed);i.removed.splice(a,1),i.added.splice(o,1)}}return i},e.prototype.articulateChanges=function(e,t){if("protocol"==e)return"mailto:"==this._super["new"].protocol?{message:"Changed to mailto link.",data:[]}:{message:(""==this._super.old.protocol?"Updated":"Changed")+" protocol to "+this._super["new"].protocol,data:[]};if("origin"==e)return"mailto:"==this._super["new"].protocol?{message:"Changed mailto link to "+this._super["new"].origin,data:[]}:{message:"Changed link URL to "+this._super["new"].origin,data:[]};if("alt"==e)return""==this._super.LinkedImage.alt?{message:"Removed linked image ALT text",data:[]}:{message:"Updated linked image ALT text to <b>"+this._super.LinkedImage.alt+"</b>",data:[]};if("search"==e){var i=this._super.old.searchParams._entries,r=this._super["new"].searchParams._entries,n=this.compareSearchStrings(i,r),s="",o=this._super;return["updated","added","removed"].forEach(function(e){n[e].length>0&&(s=s+e[0].toUpperCase()+e.substr(1,e.length)+" "+("mailto:"==o["new"].protocol?"parameter":"query string")+(n[e].length>1?"s":"")+": <b>"+n[e].join(", ")+"</b><br>")}),{message:s,data:[]}}return"hash"==e?""==this._super.old.hash?{message:"You added the hash "+this._super["new"].hash,data:[]}:""==this._super["new"].hash?{message:"You removed the hash "+this._super.old.hash,data:[]}:{message:"You changed the hash from "+this._super.old.hash+" to "+this._super["new"].hash,data:[]}:void 0},e}();e.ChangeMonitor=o;var a=function(){function e(e,t){this.overriddenIds=[],void 0===e&&(e=""),void 0===t&&(t="");this.buffer=null,this.scope=t,this.linksView="experimental",this.sourceCode=e,this.workingCode="",this.fileName="eml-maker-untitled",this.linkData=[],this._defaultSCode="s=email",this.header={subject:""},this.messages=[],this.exportForEloqua="Yes",this.__emlHeaders="",this.keyBoardShortcuts=[],this.__allowableHeaderFields={to:{syntax:"To: ",label:"To",instructions:"A list of email addresses separated by commas."},subject:{syntax:"Subject: ",label:"Subject",instructions:""},cc:{syntax:"Cc: ",label:"CC",instructions:"A list of email addresses separated by commas."},replyto:{syntax:"Reply-to: ",label:"Reply to",instructions:"A list of email addresses separated by commas."}},this.headers=["X-Unsent: 1","Mime-Version: 1.0 (Mac OS X Mail 10.1 (3251))","X-Uniform-Type-Identifier: com.apple.mail-draft","Content-Transfer-Encoding: 7bit"],this.intelligence=EMLIntelligence.module("email").monitor(),this.intelligence.associateVariable("EMLWorkspace",this)}return e.prototype.mapLinkObjects=function(e){if(this.linkData.length>0)for(var t=0;t<this.linkData.length;t++)e(this.linkData[t])},e.prototype.composeEML=function(){location.href="#/export-compose-eml"},e.prototype.downloadEml=function(){this.beforeDidDownloadEml();var e=this.__emlHeaders+"\n\n"+this.__removeWhiteSpace(this.__replaceEloquaMergeFields(this.generateOutputCode("oft")));this.fileName=this.__formatFileName(this.fileName),window.saveAs(new Blob([e],{type:"text/html"}),this.fileName+".eml"),this.afterDidDownloadEml()},e.prototype.beforeDidDownloadEml=function(){this.mapLinkObjects(function(e){if(e["new"].searchParams.has("elqTrack")){var t=e["new"].searchParams.entries.indexOf("elqTrack=true");t>-1&&e["new"].searchParams.deleteAtIndex(t)}!e["new"].searchParams.has("s")&&e.requiresSCode()?e["new"].searchParams.append("s=oft"):"email"==e["new"].searchParams.get("s")&&e["new"].searchParams.set("s","oft")}),this.mapLinkObjects(function(e){e.ChangeMonitor.update()})},e.prototype.afterDidDownloadEml=function(){window.ga("send","event","EML","download","EML Export"),location.href="#/export-eml"},e.prototype.downloadCsv=function(){var e="Context,Original URL,Modified URL\n";this.mapLinkObjects(function(t){e+=t.context.replace(/,/g,"(comma)")+","+t.old.url+","+t["new"].url+"\n"}),this.fileName=this.__formatFileName(this.fileName),window.saveAs(new Blob([e],{type:"text/csv"}),this.fileName+"_links.csv"),window.ga("send","event","CSV","download","CSV Export")},e.prototype.downloadHtml=function(){var e=this.beforeDidDownloadHtml(this.generateOutputCode("email"));this.fileName=this.__formatFileName(this.fileName),window.saveAs(new Blob([e],{type:"text/html"}),this.fileName+".html"),this.afterDidDownloadHtml()},e.prototype.beforeDidDownloadHtml=function(e){return e},e.prototype.afterDidDownloadHtml=function(){window.ga("send","event","HTML","download","HTML Export")},e.prototype.exportCodeToHTML=function(){this.beforeDidExportCodeToHTML(),this.outputCode=this.generateOutputCode("email"),this.afterDidExportCodeToHTML()},e.prototype.beforeDidExportCodeToHTML=function(){var e=!1;this.exportForEloqua&&"Yes"==this.exportForEloqua?(window.ga("send","event","HTML","Add Eloqua Tracking","Add Eloqua Tracking"),this.mapLinkObjects(function(t){e=t.whiteListedUrl==t["new"].url,t.isLinkType("mailto")||t["new"].searchParams.has("elqTrack")||/app\.info\.optum\.com/gi.test(t["new"].url)||(t["new"].searchParams.append("elqTrack=true"),e&&(t.whiteListedUrl=t["new"].url))})):this.mapLinkObjects(function(e){if(e["new"].searchParams.has("elqTrack")){var t=e["new"].searchParams.entries.indexOf("elqTrack=true");t>-1&&e["new"].searchParams.deleteAtIndex(t),e.isLinkComplete()}e.ChangeMonitor.update()}),this.mapLinkObjects(function(e){!e["new"].searchParams.has("s")&&e.requiresSCode()?e["new"].searchParams.append("s=email"):e["new"].searchParams.has("s")&&"oft"==e["new"].searchParams.get("s")&&e["new"].searchParams.set("s","email"),e.ChangeMonitor.update()}),this.mapLinkObjects(function(e){e.ChangeMonitor.update()})},e.prototype.afterDidExportCodeToHTML=function(){this.mapLinkObjects(function(e){e.whiteListedUrl==e["new"].url&&window.ga("send","event","Tracking-Optout","override",e["new"].url)}),window.ga("send","event","HTML","view sourcecode","Export/View HTML"),location.href="#/export-html"},e.prototype.setUpShortcutKeys=function(){var e=this;this.keyBoardShortcuts=[],e.keyBoardShortcuts.push(new h(function(e){return(e.ctrlKey||e.metaKey)&&e.shiftKey&&52==e.which},function(){e.scope.$apply(function(){console.log("downloading file"),e.downloadHtml()})},"CTRL + SHIFT + 4","Download HTML")),e.keyBoardShortcuts.push(new h(function(e){return(e.ctrlKey||e.metaKey)&&e.shiftKey&&51==e.which},function(){e.scope.$apply(function(){e.mapLinkObjects(function(e){e.errors.messages.length>0&&(e.errors.messages.forEach(function(e){e.type==ErrorType.Suggestion&&e.ctaHandler()}),e.isLinkComplete())})})},"CTRL + SHIFT + 3","Apply all suggestions")),e.keyBoardShortcuts.push(new h(function(e){return(e.ctrlKey||e.metaKey)&&e.shiftKey&&50==e.which},function(){e.scope.$apply(function(){e.mapLinkObjects(function(e){e.readOnly||!e.requiresSCode()||e["new"].searchParams.has("s")||(e["new"].searchParams.append("s=email"),e.isLinkComplete())})})},"CTRL + SHIFT + 2","Add s=email to all links")),e.keyBoardShortcuts.push(new h(function(e){return(e.ctrlKey||e.metaKey)&&e.shiftKey&&49==e.which},function(){e.scope.$apply(function(){e.mapLinkObjects(function(t){return!!t.readOnly||(t["new"].searchParams["delete"]("o"),t["new"].searchParams["delete"]("oin"),t["new"].searchParams["delete"]("v"),t["new"].searchParams["delete"]("oiex"),t["new"].searchParams["delete"]("elq_mid"),t["new"].searchParams["delete"]("elq_lid"),t["new"].searchParams["delete"]("elqTrack"),t["new"].searchParams["delete"]("elqTrackId"),t["new"].searchParams["delete"]("s"),t["new"].searchParams["delete"]("s3"),t.isLinkComplete(),void e.areLinksComplete())})})},"CTRL + SHIFT + 1","Remove all query strings from email")),document.onkeyup=function(t){for(var i=0,r=e.keyBoardShortcuts;i<r.length;i++){var n=r[i];n.when&&n.when(t)&&n.doThis()}}},e.prototype.replaceSpecialCharacters=function(e){var t={174:["&reg;"],169:["&copy;"],8211:["&ndash;"],8212:["&mdash;"],8220:["&ldquo;"],8221:["&rdquo;"],8216:["&lsquo;"],8217:["&rsquo;"],8482:["&trade;"]};for(var i in t)if(t.hasOwnProperty(i)){var r=new RegExp(String.fromCharCode(parseInt(i)),"g");r.test(e)&&(e=e.replace(r,t[i][0]))}return e},e.prototype.processHtml=function(){if(this.setUpShortcutKeys(),this.linkData=[],this.intelligence.overridden=[],this.intelligence.evaluateRules(),window.scrollTo(0,0),this.workingCode=this.replaceSpecialCharacters(this.sourceCode),this.__emlHeaders=this.__buildHeaders(),"untitled"==this.fileName){var e=/<title>([^<].*?)<\/title>/gi;if(e.test(this.workingCode)){var t=this.workingCode.match(e);t.length>0&&(this.fileName=this.__formatFileName(t[0].replace(e,"$1")))}}var i=this,r=/<a\b[^>]*?>([\r\n]|.)*?<\/a>/gm,n=0;this.workingCode=this.workingCode.replace(r,function(e){return n++,e.replace("<a",'<a eml-id="'+n+'"')}),n=0,this.workingCode=this.workingCode.replace(r,function(e){n++;var t=i.workingCode.substr(0,i.workingCode.indexOf(e)).split("\n").length-1;if(/(href\=\"([^\"\>]*)\"?)/g.test(e)){n++;var r=new s(t,e,i);return r.id=n,r.readOnly=r["new"].contains(".com/e/es.aspx")&&r["new"].contains("~~eloqua"),i.linkData.push(r),"{{EMLMaker_Link:"+n+"}}"}return e}),this.mapLinkObjects(function(e){e.isLinkComplete()}),location.href="#/links"},e.prototype.addNewHeaderField=function(e){this.header[e]=""},e.prototype.removeHeaderField=function(e){delete this.header[e]},e.prototype.isHeaderSelected=function(e){return!this.header.hasOwnProperty(e)||""==this.header},e.prototype.verifyLinkSectionComplete=function(){var e=!1;return!(this.intelligence&&!this.intelligence.canContinue)&&(e=(!this.linkData||0!=this.linkData.length)&&!!this.areLinksComplete())},e.prototype.generateOutputCode=function(e,t){void 0===e&&(e="email"),void 0===t&&(t=!0);var i=this.workingCode;this.mapLinkObjects(function(e){if(e.hasOwnProperty("deleteOnRender")&&e.deleteOnRender)i=i.replace(new RegExp("{{EMLMaker_Link:"+e.id+"}}","gi"),"");else if(e.readOnly){var t=e.context.replace(/eml\-id\=\"[0-9]{1,}\"\s/g,"");i=i.replace(new RegExp("{{EMLMaker_Link:"+e.id+"}}","gi"),t)}else{var r=e.context.indexOf('href="'+e.old.url),n=e.context;n=n.substr(0,r)+'href="'+e["new"].url+n.substr(r+6+e.old.url.length,n.length),e.LinkedImage&&(n=e.LinkedImage.generateOutput(n)),n=n.replace(/\s?eml\-id\=\"[0-9]*\"/g,""),i=i.replace(new RegExp("{{EMLMaker_Link:"+e.id+"}}","gi"),n)}}),i=i.replace(/\<img[^\>].*?\>/gi,function(e){return e.indexOf("alt=")>-1?e:e.replace(/\<img/gi,'<img alt=""')});try{i=i.replace(/<\/a>\n{0,5}(\.|,|\?|!|:|;|\|)/g,"</a>$1")}catch(r){console.log("error merging lines with links that previously had punctuation.")}return i},e.prototype.updateLinksAndExport=function(){return!!this.areLinksComplete()&&(location.href="#/export",window.scrollTo(0,0),!0)},e.prototype.areLinksComplete=function(){var e=!0;return this.mapLinkObjects(function(t){t.__isComplete||(e=!1),t.needsTrackingCode()&&(e=!1)}),e},e.prototype.getLinksSummary=function(){var e={needsTracking:0,invalidUrl:0};return this.mapLinkObjects(function(t){t.needsTrackingCode()&&e.needsTracking++,t.isLinkComplete()&&e.invalidUrl++}),e},e.prototype.importHtmlFromFileDrop=function(e){this.sourceCode.length>0&&(this.sourceCode="");var t=e.dataTransfer.files;if(e.dataTransfer.files.length>1)alert("you can only import one file at at time.");else{var i=new FileReader,r=this;i.onloadend=function(e){var i=e.target.result,n=t[0].name.split("."),s=n.pop().toLowerCase();r.fileName=r.__formatFileName(n.join(".")),"eml"==s?r.sourceCode=r.__stripHtmlAndSubjectFromEML(i):r.sourceCode=i,r.processHtml(),location.href="#/links"},i.readAsText(t[0]),window.ga("send","event","HTML","import","HTML Import File Drop")}},Object.defineProperty(e.prototype,"defaultSCode",{set:function(e){var t=this._defaultSCode;t!==e&&(this._defaultSCode=e,this.mapLinkObjects(function(e){e.isLinkComplete()}))},enumerable:!0,configurable:!0}),e.prototype.__formatFileName=function(e){var t=/[^\w\s-]/g,i=/[-\s]+/g;return e=e.replace(t,"").trim().toLowerCase(),e=e.replace(i,"-")},e.prototype.__replaceEloquaMergeFields=function(e){var t=/<span(%20|\s)class="?eloquaemail"?\s?>(.*?)<\/span>/gi;return e=e.replace(t,"#$2#")},e.prototype.__stripHtmlAndSubjectFromEML=function(e){for(var t=e.split("\n"),i=t.pop(),r=0;r<t.length;r++)t[r].indexOf("Subject:")>-1&&void 0===this.header&&(this.header={});return i},e.prototype.__removeWhiteSpace=function(e){var t=e;return t=t.replace(new RegExp("\n","g")," "),t=t.replace(new RegExp("\t","g")," "),t=t.replace(/\s{2,99999}/g," ")},e.prototype.__buildHeaders=function(){for(var e=[],t=0;t<this.headers.length;t++)e.push(this.headers[t]);var i=this.__getCharsetFromHTML(this.sourceCode);""==i&&(i="charset=UTF-8"),e.push("Content-Type: text/html;\n\t"+i);for(var r in this.header)this.header.hasOwnProperty(r)&&this.__allowableHeaderFields.hasOwnProperty(r)&&e.push(this.__allowableHeaderFields[r].syntax+" "+this.header[r]);return this.__emlHeaders=e.join("\n"),e.join("\n")},e.prototype.__getCharsetFromHTML=function(e){var t=/<meta.*?charset=([^\s"]*)/gi,i="",r=e.match(t);return r&&r.forEach(function(e){var t=e.match(/charset=([^\s"]*)/gi);i=t?t[0]:"charset=UTF-8"}),i},e}();e.EMLWorkspace=a;var h=function(){function e(e,t,i,r){this.when=e,this.doThis=t,this.keys=i,this.description=r}return e}();e.KeyboardShortcut=h}(EMLModule||(EMLModule={}));var IntelligenceAlert=function(){function e(){this.override=!1}return e.prototype.generateGuid=function(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()},Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(e){this._type=e,this.cleanType=ErrorType[e]},enumerable:!0,configurable:!0}),e.prototype.setOverrideStatus=function(e){this.override=e},e}(),EMLMakerIntelligence;!function(e){var t=function(){function e(e,t){this._scope=t,this._monitor=e,this.searchType=this.defaultSearchType()}return e.prototype.setType=function(e){this.searchType=e},e.prototype.defaultSearchType=function(){this._monitor.types;return Object.keys(this._monitor.tabs).length>1?"":this._monitor.tabs[Object.keys(this._monitor.tabs)[0]]},e.prototype.canViewAll=function(){return Object.keys(this._monitor.tabs).length>1},Object.defineProperty(e.prototype,"search",{get:function(){var e=this._monitor.types;return e&&this.searchType in e?{type:this.searchType}:{type:this.defaultSearchType()}},enumerable:!0,configurable:!0}),e}();e.IntelligenceCenter=t;var i=function(){function e(){this.messages=[],this.canContinue=!0,this.cachedResults=[],this.scopes=[]}return e.prototype.__locateScope=function(e){var t=this.scopes.filter(function(t){return t.scope==e});if(0==t.length){var i=new r(e);this.scopes.push(i);return i}return t[0]},e.prototype.readOutRules=function(){this.scopes.forEach(function(e){for(var t=Object.keys(e.rules),i=0;i<t.length;i++);})},e.prototype.module=function(e){var t=this.__locateScope(e);return t},e}();e.IntelligenceEngine=i;var r=function(){function e(e){this.scope=e,this.rules={}}return e.prototype.monitor=function(){return new n(this)},e.prototype.register=function(e,t){return this.rules[e]=t,this},e}();e.IntelligenceModule=r;var n=function(){function e(e){this.rules=e.rules,this.overridden=[],this.variables={IntelligenceMonitor:this},this.reset()}return e.prototype.reset=function(){this.messages=[],this.canContinue=!0},e.prototype.associateVariable=function(e,t){this.variables[e]=t},e.prototype.evaluateRule=function(e){var t;if("object"==typeof e){var i=e[e.length-1],r=e.slice(0,e.length-1),n=this,s=r.map(function(e){return n.variables[e]});try{t=i.apply(null,s)}catch(o){console.error(o)}}else t=e();return t},e.prototype.evaluateRules=function(){this.reset();for(var e=Object.keys(this.rules),t=0,i=e;t<i.length;t++){var r=i[t],n=this.evaluateRule(this.rules[r]),s=!!n.hasOwnProperty("when")&&n.when.apply(null);if(s){var o=new IntelligenceAlert;o.id=void 0===n.id||""==n.id?o.generateGuid():n.id,o.type=void 0===n.type?ErrorType.Warn:n.type,o.severity=void 0===n.severity?ErrorSeverity.Zero:n.severity,o.title=void 0===n.title?"":n.title,o.description=void 0===n.description?"":n.description,o.resource=void 0===n.resource?"":n.resource,o.ctaHandler=n.cta&&n.cta.handler?n.cta.handler:function(){},o.ctaLabel=n.cta&&n.cta.label?n.cta.label:"",o.canContinue=!n.hasOwnProperty("canContinue")||n.canContinue,this.messages.push(o)}}for(var a=0;a<this.messages.length;a++)this.overridden.indexOf(this.messages[a].id)>-1&&(this.messages[a].override=!0),this.messages[a].canContinue||this.messages[a].override||(this.canContinue=!1);this.messages.sort(function(e,t){return e._type>t._type?1:e._type<t._type?-1:0})},Object.defineProperty(e.prototype,"tabs",{get:function(){for(var e={},t=0;t<this.messages.length;t++)e[this.messages[t].cleanType]=this.messages[t].type;return e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"types",{get:function(){for(var e={},t=0;t<this.messages.length;t++)e[this.messages[t].type]=ErrorType[this.messages[t].type];return e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"count",{get:function(){for(var e={},t=0;t<this.messages.length;t++)void 0===e[ErrorType[this.messages[t].type]]&&(e[ErrorType[this.messages[t].type]]=0),e[ErrorType[this.messages[t].type]]++;return e},enumerable:!0,configurable:!0}),e}();e.IntelligenceMonitor=n}(EMLMakerIntelligence||(EMLMakerIntelligence={}));var EMLIntelligence=new EMLMakerIntelligence.IntelligenceEngine,AccessOnlineVersion=function(){function e(e){this.animate=!0,this.status="attempting",this.headline="Checking availability of online version",this.message="If we're able to access the online version, you will be redirected.",void 0===e.success&&(e.success=function(){}),void 0===e.onerror&&(e.onerror=function(){}),window.LOCALHOST=this.isLocalMachine(),window.OFFLINE_VERSION=getOfflineVersionNumber(),window.LOCALHOST?(window.scrollTo(0,0),this.obtainKeyFromServer(e)):(this.status="failed",this.animate=!1,document.title=window.PAGE_TITLE)}return e.prototype.obtainKeyFromServer=function(e){if(this.isLocalMachine()){var t,i,r;window.redirectJsonpCallback=function(t){1==t?(e.success(),console.log("FOUND?"),setTimeout(function(){location.href="http://johnproestakes.github.io/eml-maker?offline_version="+window.CURRENT_VERSION},500)):console.log("not github")},t=document.createElement("script"),i=document.getElementsByTagName("script")[0],t.type="text/javascript",t.onerror=function(){e.onerror()},t.src=this.isLocalMachine()?"http://johnproestakes.github.io/eml-maker/prod/app/canredirect.js":"",setTimeout(function(){i.parentNode.insertBefore(t,r)},2e3),document.title=window.PAGE_TITLE+" (Offline Mode)"}else this.status="failed",this.animate=!1,document.title=window.PAGE_TITLE},e.prototype.getOfflineVersionNumber=function(){var e="";if(window.location.search.indexOf("offline_version")){var t=window.location.search.substr(1,window.location.search.length).split("&");t.forEach(function(t){t.indexOf("offline_version=")>-1&&(e=t.substr("offline_version=".length,t.length))})}return e},e.prototype.isLocalMachine=function(){return location.href.indexOf("johnproestakes.github.io")==-1},e}(),UpdateModule=function(){function e(){if(this.updateVersion=!1,this.updateForced=!1,this.offlineVersion=void 0===window.OFFLINE_VERSION?getOfflineVersionNumber():window.OFFLINE_VERSION,this.onlineVersion=window.CURRENT_VERSION,location.href.indexOf("localhost")>-1&&(window.LOCALHOST=!1),""==this.offlineVersion)this.accessingFromOffline=!1;else if(this.offlineVersion&&window.LOCALHOST&&(this.accessingFromOffline=!0),
this.offlineVersion&&this.offlineVersion!==this.onlineVersion){this.updateVersion=!0;var e=new ApplicationVersion(this.offlineVersion),t=new ApplicationVersion(this.onlineVersion);this.updateForced=e.compareAgainst(t)<=AppVersionDifferenceType.PATCH,console.log("UPDATEFORCED?",this.updateForced,e,t)}}return e.prototype.showMessage=function(){return this.updateVersion&&this.updateForced},e.prototype.showTeaser=function(){return""==this.offlineVersion&&!window.LOCALHOST},e.prototype.forceUpdate=function(e,t){for(var i=e.split("."),r=t.split("."),n=0,s=!1,o=0;o<r.length;o++)r[o]==i[o]&&n++;return n<3&&(s=!0),s},e}(),AppVersionDifferenceType;!function(e){e[e.MAJOR=0]="MAJOR",e[e.MINOR=1]="MINOR",e[e.PATCH=2]="PATCH",e[e.SUBPATCH=3]="SUBPATCH",e[e.NONE=4]="NONE"}(AppVersionDifferenceType||(AppVersionDifferenceType={}));var ApplicationVersion=function(){function e(e){this._version=e,this.versionObject=this._version.split(".").map(function(e){return parseInt(e)})}return e.prototype.compareAgainst=function(e){for(var t=this.versionObject,i=e.versionObject,r=0,n=0;n<4&&t[n]==i[n];n++)r++;return AppVersionDifferenceType[AppVersionDifferenceType[r]]},e}(),SecureGateway=function(){function e(e,t){this.canLogin=!1,this.loginCallback=e,this.loginTimer=null,this.sessionUserEmail="",this.timerDelay=500,this.salt="47dafea9aae3b28ab5c39eb7f7d2c924",this.emailRegex=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,this.sessionIdLocalStorageKey="EMLMaker.emlSessionUID",window.persist_store||(window.persist_store=new window.Persist.Store("EMLMaker"),window.addEventListener("unload",function(){window.persist_store.save()}));location.href="#/login"}return e.prototype.init=function(){var e=this;this.hasSavedSessionId()&&this.isValidEmailAddress(this.sessionId)?(this.sessionUserEmail=this.sessionId,location.href="#/login",this.loginTimer=setTimeout(function(){location.href="#/main",e.setCurrentUser(e.sessionUserEmail)},this.timerDelay)):(location.href="#/login",this.sessionUserEmail=""),window.addEventListener("hashchange",function(){""!=e.sessionUserEmail&&e.hasSavedSessionId()||(location.href="#/login")})},e.prototype.logOut=function(){this.loginAsOther(),this.sessionId="",this.sessionUserEmail="",window.persist_store.remove(this.sessionIdLocalStorageKey),"reload"in location?location.reload():document.location.href=document.location.href},e.prototype.loginAsOther=function(){clearTimeout(this.loginTimer),delete this.loginTimer},e.prototype.sessionUpdateUserEmail=function(){this.errorMessage="",this.isValidEmailAddress(this.sessionUserEmail)?(this.setCurrentUser(this.sessionUserEmail),this.loginCallback(),location.href="#/main"):this.errorMessage="Sorry! You have to enter a valid email address."},e.prototype.hasSavedSessionId=function(){var e=window.persist_store.get(this.sessionIdLocalStorageKey);return e?(this.sessionId=this.decrypt(e),!0):(this.sessionId="",!1)},e.prototype.encrypt=function(e){var t=e+"";return t=t.replace(/./gi,function(e){return String.fromCharCode(e.charCodeAt(0)+1)})},e.prototype.decrypt=function(e){var t=e+"";return t=t.replace(/./gi,function(e){return String.fromCharCode(e.charCodeAt(0)-1)})},e.prototype.setCurrentUser=function(e){var t=window.CryptoJS.MD5(e+this.salt).toString();window.persist_store.set(this.sessionIdLocalStorageKey,this.encrypt(e)),window.ga("set","userId",t)},e.prototype.isValidEmailAddress=function(e){return this.emailRegex.test(e)?(console.log(e,"is valid"),!0):(console.log(e,"is not valid"),!1)},e}();
//# sourceMappingURL=data:application/json;base64,
